///////////////////////////////////////////////////////////
//  JerarquiasController.cs
//  Implementation of the Class JerarquiasController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:37
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SiCGA.Clases.Modelos;



using SiCGA.Clases;
namespace SiCGA.Clases.Controladores {
	/// <summary>
	/// Controlador para el Modelo Jerarquias
	/// </summary>
	public class JerarquiasController : Metodos {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public JerarquiasController(){

		}
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~JerarquiasController(){

		}

		/// <summary>
		/// Actualizar Catálogo Jerarquías
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo Jerarquías</param>
		public override bool ActualizarRegistro(object o){

			if(o.GetType() == typeof(JerarquiasModel))//Verificar que el Objeto sea del tipo JerarquiaModel
            {
                var j = (JerarquiasModel)o; // Castear variable "j" al modelo JerarquíaModel

                if(Abrir())// Intentar abrir la conexión
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear lista de parámetros
                        lista.Add(new Parametros(@"opc", "3"));// Indicar la Opción a ejecutar en el Procedimiento
                        lista.Add(new Parametros(@"id", j.Id.ToString()));// Indicar el identificador del Registro
                        lista.Add(new Parametros(@"jera", j.Jerarquia));// Indicar la descripción del registro Jerarquia

                        string proce = "sp_jerarquia_crud";// Indicar el procedimiento a ejecutar

                        if(EjecutarProcedimiento(proce, lista))//Ejecutar el Procedimiento
                        { return true; }// Ejecución Exitosa
                        else
                        { return false; }// Ejecución NO Exitosa, Cosnultar Error
                    }
                    catch(Exception e)// Atrapar el error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false; // Indicar que existe Error
                    }
                    finally { Cerrar(); } // Cerrar la Conexión
                }
                else
                { return false; }// Error al intentar abrir conexión, consultar Error
            }
            else
            { return false; }// No es del mismo tipo
		}
		/// <summary>
		/// Consultar un Registro
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo Jerarquías</param>
		public override bool ConsultarRegistro(object o){

            if (o.GetType() == typeof(JerarquiasModel))//Verificar que el Objeto sea del tipo JerarquiaModel
            {
                var j = (JerarquiasModel)o; // Castear variable "j" al modelo JerarquíaModel

                if (Abrir())// Intentar abrir la conexión
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear lista de parámetros
                        lista.Add(new Parametros(@"opc", "4"));// Indicar la Opción a ejecutar en el Procedimiento
                        lista.Add(new Parametros(@"id", j.Id.ToString()));// Indicar el identificador del Registro
                        lista.Add(new Parametros(@"jera",string.Empty));// Vacío

                        string proce = "sp_jerarquia_crud";// Indicar el procedimiento a ejecutar

                        if (EjecutarProcedimiento(proce, lista))//Consultar el Procedimiento
                        { return true; }// Consulta Exitosa, Ver Table
                        else
                        { return false; }// Consulta NO Exitosa, Cosnultar Error
                    }
                    catch (Exception e)// Atrapar el error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false; // Indicar que existe Error
                    }
                    finally { Cerrar(); } // Cerrar la Conexión
                }
                else
                { return false; }// Error al intentar abrir conexión, consultar Error
            }
            else
            { return false; }// No es del mismo tipo
        }
        /// <summary>
        /// Método Para Consultar Todos los Registros
        /// </summary>
        /// <returns>Boleano</returns>
		public override bool ConsultarRegistros(){

            if (Abrir())// Intentar abrir la conexión
            {
                try
                {
                    List<Parametros> lista = new List<Parametros>();// Crear lista de parámetros
                    lista.Add(new Parametros(@"opc", "1"));// Indicar la Opción a ejecutar en el Procedimiento
                    lista.Add(new Parametros(@"id", string.Empty));// Indicar el identificador del Registro
                    lista.Add(new Parametros(@"jera", string.Empty));// Indicar la descripción del registro Jerarquia

                    string proce = "sp_jerarquia_crud";// Indicar el procedimiento a ejecutar

                    if (ConsultarProcedimiento(proce, lista))//Consultar el Procedimiento
                    { return true; }// Consulta Exitosa, Ver Tabla
                    else
                    { return false; }// Consulta NO Exitosa, Ver Error
                }
                catch (Exception e)// Atrapar el error
                {
                    Error = e.Message.ToString();// Guardar el Error
                    return false; // Indicar que existe Error
                }
                finally { Cerrar(); } // Cerrar la Conexión
            }
            else
            { return false; }// Error al intentar abrir conexión, consultar Error

        }
		/// <summary>
        /// Método para Ingresar un Registro
        /// </summary>
        /// <param name="o">Onjeto del Tipo JerarquiasModel</param>
        /// <returns>Boleano</returns>
		public override bool IngresarRegisto(object o){

            if (o.GetType() == typeof(JerarquiasModel))//Verificar que el Objeto sea del tipo JerarquiaModel
            {
                var j = (JerarquiasModel)o; // Castear variable "j" al modelo JerarquíaModel

                if (Abrir())// Intentar abrir la conexión
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear lista de parámetros
                        lista.Add(new Parametros(@"opc", "2"));// Indicar la Opción a ejecutar en el Procedimiento
                        lista.Add(new Parametros(@"id", j.Id.ToString()));// Indicar el identificador del Registro
                        lista.Add(new Parametros(@"jera", j.Jerarquia));// Indicar la descripción del registro Jerarquia

                        string proce = "sp_jerarquia_crud";// Indicar el procedimiento a ejecutar

                        if (EjecutarProcedimiento(proce, lista))//Ejecutar el Procedimiento
                        { return true; }// Ejecución Exitosa
                        else
                        { return false; }// Ejecución NO Exitosa, Cosnultar Error
                    }
                    catch (Exception e)// Atrapar el error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false; // Indicar que existe Error
                    }
                    finally { Cerrar(); } // Cerrar la Conexión
                }
                else
                { return false; }// Error al intentar abrir conexión, consultar Error
            }
            else
            { return false; }// No es del mismo tipo
        }

	}//end JerarquiasController

}//end namespace Controladores