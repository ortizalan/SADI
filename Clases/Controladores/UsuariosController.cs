///////////////////////////////////////////////////////////
//  UsuariosController.cs
//  Implementation of the Class UsuariosController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:19:09
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SADI.Clases.Modelos;


namespace SADI.Clases.Controladores {
	/// <summary>
	/// Controlador del Modelo Usuarios
	/// </summary>
	public class UsuariosController : Metodos {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public UsuariosController(){

		}
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~UsuariosController(){

		}
        /// <summary>
        /// Método para Actualizar el Registro del Modelo Usuario
        /// </summary>
		/// <param name="o">Objeto del Tipo UsuariosModel</param>
        /// <returns>Boleano</returns>
		public override bool ActualizarRegistro(object o){

            if (o.GetType() == typeof(UsuariosModel))// Validar que el objeto dea del Tipo UsuariosModel
            {
                var u = (UsuariosModel)o; // Casteamos el Objeto al tipo UsuariosModel

                if(Abrir()) // Si Abre la conexión
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "3"));// Opción para actualizar dentro del procedimiento
                        lista.Add(new Parametros(@"id", u.Id.ToString()));// Todos los parámetros deben de ir en string/cadena clase nativa del CLR
                        lista.Add(new Parametros(@"usr", u.Usuario));// Nombre de Usuario
                        lista.Add(new Parametros(@"pwd", Seguridad.Encriptar(u.Contraseña)));// Contraseña del Usuario
                        lista.Add(new Parametros(@"nom", u.Nombre));// Nombre del Usuario
                        lista.Add(new Parametros(@"pat", u.Paterno));// Apellido Paterno del Usuario
                        lista.Add(new Parametros(@"mat", u.Materno));// Apellido Materno del Usuario
                        lista.Add(new Parametros(@"fondo", u.Fondo.Id.ToString()));// Fondo al que pertence el Usuario
                        lista.Add(new Parametros(@"jera", u.Jerarquia.Id.ToString()));// Jerarquía del Usuario
                        lista.Add(new Parametros(@"email",(!string.IsNullOrEmpty(u.Email)?u.Email:string.Empty)));//Si cuenta con Dirección email, si no campo vació
                        lista.Add(new Parametros(@"est", (u.Estatus == true ? "1" : "0")));// Si es verdadero = Activo :1; si es Falso = inactivo : 0

                        string proce = "sp_usuarios_crud";// Nombre del Procedimiento

                        if(EjecutarProcedimiento(proce, lista))
                        { return true; }// Se ejecutó el procedimiento exitosamente
                        else { return false; }// No se ejecutó el procedimiento, ver Error
                    }
                    catch(Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // guardar el error
                        return false; // Indicar que existe errir
                    }
                    finally { Cerrar(); } // Asegurarnos de que se cierra la conexión siempre
                }
                else // Si no abre la conexión
                { return false; }
            }
            else // Si no es del tipo UsuariosModel
            { return false; }
		}
		/// <summary>
		/// Consultar un Usuario del Sistema
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del tipo UsuariosModel</param>
		public override bool ConsultarRegistro(object o){

            if (o.GetType() == typeof(UsuariosModel))
            {
                var u = (UsuariosModel)o;
                if (Abrir())
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4"));// Opcioón para consultar un registro solamente
                        lista.Add(new Parametros(@"id", u.Id.ToString()));// Identificador del registro
                        lista.Add(new Parametros(@"usr", string.Empty));
                        lista.Add(new Parametros(@"pwd", string.Empty));
                        lista.Add(new Parametros(@"nom", string.Empty));
                        lista.Add(new Parametros(@"pat", string.Empty));
                        lista.Add(new Parametros(@"mat", string.Empty));
                        lista.Add(new Parametros(@"fondo", string.Empty));
                        lista.Add(new Parametros(@"jera", string.Empty));
                        lista.Add(new Parametros(@"email", (!string.IsNullOrEmpty(u.Email) ? u.Email : string.Empty)));//Si cuenta con Dirección email, si no campo vació
                        lista.Add(new Parametros(@"est", string.Empty));
                        lista.Add(new Parametros(@"atr", string.Empty));

                        string proce = "sp_usuarios_crud";// Nombre del procedimiento

                        if (ConsultarProcedimiento(proce, lista))
                        {
                            return true;// Consulta exitosa
                        }
                        else
                        { return false; }// Consulta no exitosa
                    }
                    catch(Exception e)// Cachar el error
                    {
                        Error = e.Message.ToString();// Guardar el mensaje de error
                        return false;// Indicar operación No Exitosa
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }//No se pudo Abrir la Conexión
            }
            else
            { return false; }// No es del tipo UsuariosModel
		}
        /// <summary>
        /// Consultar El Total de Registros de los Usuarios
        /// </summary>
        /// <returns>Boolean</returns>
		public override bool ConsultarRegistros(){

            if (Abrir())
            {
                try
                {
                    List<Parametros> lista = new List<Parametros>();
                    lista.Add(new Parametros(@"opc", "1"));// Opción para actualizar dentro del procedimiento
                    lista.Add(new Parametros(@"id", string.Empty));// Todos los parámetros deben de ir en string/cadena clase nativa del CLR
                    lista.Add(new Parametros(@"usr", string.Empty));
                    lista.Add(new Parametros(@"pwd", string.Empty));
                    lista.Add(new Parametros(@"nom", string.Empty));
                    lista.Add(new Parametros(@"pat", string.Empty));
                    lista.Add(new Parametros(@"mat", string.Empty));
                    lista.Add(new Parametros(@"fondo", string.Empty));
                    lista.Add(new Parametros(@"jera", string.Empty));
                    lista.Add(new Parametros(@"email", string.Empty));//Si cuenta con Dirección email, si no campo vació
                    lista.Add(new Parametros(@"est", string.Empty));// Si es verdadero = Activo :1; si es Falso = inactivo : 0

                    string proce = "sp_usuarios_crud";

                    if (ConsultarProcedimiento(proce, lista))
                    { return true; }
                    else
                    { return false; }
                }
                catch (Exception e)
                {
                    Error = e.Message.ToString();// Guardar el mensaje de error
                    return false;// Indicar Operación NO Exitosa
                }
                finally { Cerrar(); }// Cerrar la conexión
            }
            else
            { return false; }// No se pudo Abrir la COnexión
		}
		/// <summary>
		/// Ingresar un Usuario al Sistema
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto de tipo Usuario</param>
		public override bool IngresarRegisto(object o){

            if (o.GetType() == typeof(UsuariosModel))// Validar que el Objeto sea del tipo UsuariosModel
            {
                var u = (UsuariosModel)o;// Castear la variable al tipo UsuariosModel

                if(Abrir())// Intentar Abrir la Conexión
                {
                    // Si se estableció la conexión
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "2"));// Opción para Ingresar Registro dentro del procedimiento
                        lista.Add(new Parametros(@"id", u.Id.ToString()));
                        lista.Add(new Parametros(@"usr", u.Usuario));
                        lista.Add(new Parametros(@"pwd", Seguridad.Encriptar(u.Contraseña)));
                        lista.Add(new Parametros(@"nom", u.Nombre));
                        lista.Add(new Parametros(@"pat", u.Paterno));
                        lista.Add(new Parametros(@"mat", (!string.IsNullOrEmpty(u.Materno) ? u.Materno : string.Empty)));// Validar que la variable materno no sea nula
                        lista.Add(new Parametros(@"fondo", u.Fondo.Id.ToString()));
                        lista.Add(new Parametros(@"jera", u.Jerarquia.Id.ToString()));
                        lista.Add(new Parametros(@"email", (!string.IsNullOrEmpty(u.Email) ? u.Email : string.Empty)));//Si cuenta con Dirección email, si no campo vació
                        lista.Add(new Parametros(@"est", "1"));// Si se vá a ingresar, siempre será activo
                        lista.Add(new Parametros(@"atr", (u.Atributos ? "1" : "0")));

                        string proce = "sp_usuarios_crud";

                        if(EjecutarProcedimiento(proce, lista))// Ejecutar el procedimiento
                        { return true; }// Operación Exitosa
                        else
                        { return false; }// Operación NO Exitosa, consultar el Error

                    }
                    catch(Exception e)// Cachar el error
                    {
                        Error = e.Message.ToString();// Guardar el mensaje de error
                        return false;// Indicar que la operación NO fue exitosa
                    }
                    finally { Cerrar(); }// Cerrar la conexión

                }
                else
                { return false; }// No Se Pudo Abrir la Conexión, ver mensaje de error
            }
            else
            { return false; }// No es del mismo tipo
		}
        /// <summary>
        /// Mëtodo para la Validación de Usuario registrado en el Sistema
        /// </summary>
        /// <param name="o">Objeto del tipo UsuariosModel</param>
        /// <returns>Boleano</returns>
        public bool validarUsuario(object o)
        {
            if (o.GetType() == typeof(UsuariosModel))// Avlidar que el Objeto sea del tipo UsuariosModel
            {
                var u = (UsuariosModel)o;// Castear el Objeto al Tipo UsuariosModel

                if (Abrir())// Intentar abrir la conexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Arreglo del Tipo Parámetros
                        lista.Add(new Parametros(@"opc","1"));// OPcion 1 dentro del procedimiento
                        lista.Add(new Parametros(@"usr", u.Usuario)); // Enviar el usuario
                        lista.Add(new Parametros(@"pwd", u.Contraseña));// Enviar la Contraseña

                        string proce = "sp_usuarios_seleccion";// Nombre del Procedimiento

                        if (ConsultarProcedimiento(proce, lista))
                        { return true; }// Si esxiste el Usuario
                        else
                        { return false; }// NO existe el Usuario
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString();// Atrapar el error
                        return false; // indicar que existe el error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// No se pudo Abrir la conexión, consultar Error
            }
            else
            { return false; }// No son del mismo tipo
        }
        /// <summary>
        /// Validar Constrasela del Usuario
        /// </summary>
        /// <param name="o">Objeto del Tipo UsuariosModel</param>
        /// <returns>Boleano</returns>
        public bool validarContraseña(object o)
        {
            if(o.GetType() == typeof(UsuariosModel))// Validar que el objeto sea del tipo UsuariosModel
            {
                var u = (UsuariosModel)o; // Castear el Modelo a la Variable

                if(Abrir())// Intentar abrir la conexión
                {
                    // Intento exitoso
                   try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear una lista de parámetros
                        lista.Add(new Parametros(@"opc","2"));// Indicarle la opción al procedimiento
                        lista.Add(new Parametros(@"usr", u.Usuario));// Enviar el Usuario
                        lista.Add(new Parametros(@"pwd", Seguridad.Encriptar(u.Contraseña)));// Enviar la Constraseña

                        string proce = "sp_usuarios_seleccion";// Indicar el Procedimiento

                        if(ConsultarProcedimiento(proce,lista))// Intentar realizar la consulta
                        { return true; }// Consulta Exitosa
                        else
                        { return false; }// Consulta NO Exitosa

                    }
                    catch(Exception e)// Atrapar el error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false; // Indicar que existe el error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else// No se pudo establecer la conexión
                {
                    return false; // Consultar Error
                }
            }
            else// No es del mismo tipo
            {
                return false;
            }
        }
        /// <summary>
        /// Validar Obtener el Id y Estatus del Usuario
        /// </summary>
        /// <param name="o">Objeto del tipo UsuariosModel</param>
        /// <returns>Boleano</returns>
        public bool obtenerId_Estatus(object o)
        {
            if(o.GetType() == typeof(UsuariosModel))// Validar que el Objeto sea del Modelo Correcto
            {
                var u = (UsuariosModel)o;// Casteo del Modelo Usuario a la variable "u"

                if(Abrir())// Intentar Abrir la Coexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Lista de Parámetros
                        lista.Add(new Parametros(@"opc","3"));// Indicarle la Opción al Procedimiento
                        lista.Add(new Parametros(@"usr",u.Usuario));// Enviar el Usuario
                        lista.Add(new Parametros(@"pwd",Seguridad.Encriptar(u.Contraseña)));// Enviar la contraseña

                        string proce = "sp_usuarios_seleccion";

                        if(ConsultarProcedimiento(proce,lista))// Intentar Cosnultar el Procedimiento
                        { return true; }// Intento Exitoso
                        else
                        { return false; }// Intento NO Exitoso
                    }
                    catch(Exception e)// Atrapar el error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false;// Indicar que existe el error
                    }
                    finally { Cerrar(); }// Cwerrar Conexión
                }
                else
                { return false; }// Intento NO Exitoso, ver Error
            }
            else
            { return false; }// No es del mismo tipo que el modelo
        }
        /// <summary>
        /// Obtener el Último Registro Ingresado 
        /// </summary>
        /// <returns>Boleano</returns>
        public bool ObtenerUltimoUsuarioIngresado()
        {
            //Intentar Abrir la Conexión 
            if(Abrir())
            {
                try
                {
                    string proce = "sp_usuarios_seleccion";//Nombre del procedimiento
                    List<Parametros> lista = new List<Parametros>();//Lista de parámetros
                    lista.Add(new Parametros(@"opc", "4"));
                    lista.Add(new Parametros(@"usr", string.Empty));
                    lista.Add(new Parametros(@"pwd", string.Empty));
                    //Intentar la Consulta
                    if(ConsultarProcedimiento(proce, lista))
                    { return true; }//Intento Exitoso
                    else//Intento NO Exitoso, Consultar Error
                    { return false; }
                }
                catch(Exception e)//Atrapar el error
                {
                    Error = e.Message.ToString();//Guardar el Error
                    return false;//Indicar que existe el Error
                }
                finally { Cerrar(); }//Cerrar la Conexión
            }
            else//Intento NO Exitoso, Consultar Error
            {
                return false;
            }
        }

        public bool PruebaTablaTemp()
        {
            // Prueba de utilización de tablas temporales
            if (Abrir())
            {
                try
                {
                    List<Parametros> lista = new List<Parametros>();

                    string sentencia = string.Empty;
                    sentencia = "declare @rafita ";// declaramos
                    sentencia += "table(id int, descri varchar(20));";// creamos
                    sentencia += "insert into @rafita values (1, 'Valor UNO');";// insertamos valores
                    sentencia += "insert into @rafita values (2, 'Valor DOS');";// --
                    sentencia += "select* from @rafita;";// Realizamos la selección

                    if (ConsultarSentenciaSQL(sentencia))
                    { return true; }
                    else
                    { return false; }

                }
                catch(Exception e)
                {
                    Error = e.Message.ToString();
                    return false;
                }
                finally { Cerrar(); }
            }
            else
            {
                return false;
            }
        }

	}//end UsuariosController

}//end namespace Controladores