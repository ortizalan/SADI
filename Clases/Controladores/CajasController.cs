///////////////////////////////////////////////////////////
//  CajasController.cs
//  Implementation of the Class CajasController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:30
//  Original author: Ing. Alán Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SiCGA.Clases.Modelos;




namespace SiCGA.Clases.Controladores
{
    public class CajasController : Metodos
    {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
        public CajasController()
        {

        }
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
        ~CajasController()
        {

        }

        /// <summary>
        /// Método para Consultar un Registro del Modelo Cajas
        /// </summary>
        /// <param name="o">Objeto del Tipo CajasModel</param>
        /// <returns>Boleano</returns>
        public override bool ConsultarRegistro(object o)
        {

            if (o.GetType() == typeof(CajasModel))// Verificar que el Objeto dea del Tipo CajasModel
            {
                var c = (CajasModel)o; // Castaer la variable "c" al tipo CajasModel

                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4"));// Se le indica la Opción al Procedimiento
                        lista.Add(new Parametros(@"id", c.Id.ToString())); // Identificdor del Registro
                        lista.Add(new Parametros(@"num", string.Empty));
                        lista.Add(new Parametros(@"fol_car", string.Empty));
                        lista.Add(new Parametros(@"año", string.Empty));
                        lista.Add(new Parametros(@"n_d_m", string.Empty));
                        lista.Add(new Parametros(@"idtrans", string.Empty));

                        string proce = "sp_cajas_crud";

                        if (ConsultarProcedimiento(proce, lista))// Consultar el Procedimiento
                        { return true; }// Consulta Exitosa, Cnsultar Tabla
                        else
                        { return false; }// Consulta NO Exitosa, Consultar Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString();// Atrapa el error
                        return false; // Indica que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento Fallido, Consultar Error
            }
            else
            { return false; }// No es del Tipo CajasModel
        }

        /// <summary>
        /// Método para Actualizar Registro
        /// </summary>
        /// <param name="o">Objeto del Tipo CajasModel</param>
        /// <returns>Boleano</returns>
        public override bool ActualizarRegistro(object o)
        {

            if (o.GetType() == typeof(CajasModel))// Verificar que el Objeto dea del Tipo CajasModel
            {
                var c = (CajasModel)o; // Castaer la variable "c" al tipo CajasModel

                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "3"));// Se le indica la Opción al Procedimiento
                        lista.Add(new Parametros(@"id", c.Id.ToString())); // Identificdor del Registro
                        lista.Add(new Parametros(@"num", c.Numero.ToString()));// Número de caja
                        lista.Add(new Parametros(@"fol_car", c.Folders_Carpetas.ToString()));// Número de Folders/Carpetas de la Caja
                        lista.Add(new Parametros(@"año", c.Año.ToString()));// Año de la Carpeta
                        lista.Add(new Parametros(@"n_d_m", c.NdeM.ToString()));// Ordén de un Grupo de Cajas
                        lista.Add(new Parametros(@"idtrans", c.Transferencia.Id.ToString()));// Identificador de la transferencia

                        string proce = "sp_cajas_crud";// Nombre del Procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Ejecutar el Procedimiento
                        { return true; }// Ejecución Exitosa, Cnsultar Tabla
                        else
                        { return false; }// Ejecución NO Exitosa, Consultar Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString();// Atrapa el error
                        return false; // Indica que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento Fallido, Consultar Error
            }
            else
            { return false; }// No es del Tipo CajasModel
        }

        /// <summary>
        /// Método para Ingresar Registro a Cajas
        /// </summary>
        /// <param name="o">Objeto del Tipo CajasModel</param>
        /// <returns>Boleano</returns>
        public override bool IngresarRegisto(object o)
        {

            if (o.GetType() == typeof(CajasModel))// Verificar que el Objeto dea del Tipo CajasModel
            {
                var c = (CajasModel)o; // Castaer la variable "c" al tipo CajasModel

                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "2"));// Se le indica la Opción al Procedimiento
                        lista.Add(new Parametros(@"id", c.Id.ToString())); // Identificdor del Registro
                        lista.Add(new Parametros(@"num", c.Numero.ToString()));// Número de caja
                        lista.Add(new Parametros(@"fol_car", c.Folders_Carpetas.ToString()));// Número de Folders/Carpetas de la Caja
                        lista.Add(new Parametros(@"año", c.Año.ToString()));// Año de la Carpeta
                        lista.Add(new Parametros(@"n_d_m", c.NdeM.ToString()));// Ordén de un Grupo de Cajas
                        lista.Add(new Parametros(@"idtrans", c.Transferencia.Id.ToString()));// Identificador de la transferencia

                        string proce = "sp_cajas_crud";// Nombre del Procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Ejecutar el Procedimiento
                        { return true; }// Ejecución Exitosa, Cnsultar Tabla
                        else
                        { return false; }// Ejecución NO Exitosa, Consultar Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString();// Atrapa el error
                        return false; // Indica que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento Fallido, Consultar Error
            }
            else
            { return false; }// No es del Tipo CajasModel
        }
        /// <summary>
        /// Método para Consultar Todos Los Registros
        /// </summary>
        /// <returns>Boleano</returns>
		public override bool ConsultarRegistros()
        {

            if (Abrir())// Intentar Abrir la Conexión
            {
                // Intento Exitoso
                try
                {
                    List<Parametros> lista = new List<Parametros>();
                    lista.Add(new Parametros(@"opc", "4"));// Se le indica la Opción al Procedimiento
                    lista.Add(new Parametros(@"id", string.Empty)); // Identificdor del Registro
                    lista.Add(new Parametros(@"num", string.Empty));// Número de caja
                    lista.Add(new Parametros(@"fol_car", string.Empty));// Número de Folders/Carpetas de la Caja
                    lista.Add(new Parametros(@"año", string.Empty));// Año de la Carpeta
                    lista.Add(new Parametros(@"n_d_m", string.Empty));// Ordén de un Grupo de Cajas
                    lista.Add(new Parametros(@"idtrans", string.Empty));// Identificador de la transferencia

                    string proce = "sp_cajas_crud";// Nombre del Procedimiento

                    if (ConsultarProcedimiento(proce, lista))// Consultar el Procedimiento
                    { return true; }// Consulta Exitosa, Cnsultar Tabla
                    else
                    { return false; }// Consulta NO Exitosa, Consultar Error
                }
                catch (Exception e)// Atrapar el Error
                {
                    Error = e.Message.ToString();// Atrapa el error
                    return false; // Indica que existe un error
                }
                finally { Cerrar(); }// Cerrar la conexión
            }
            else
            { return false; }// Intento Fallido, Consultar Error
        }

    }//end CajasController

}//end namespace Controladores