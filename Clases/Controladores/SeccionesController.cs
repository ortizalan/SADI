///////////////////////////////////////////////////////////
//  SeccionesController.cs
//  Implementation of the Class SeccionesController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:53
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SADI.Clases.Modelos;



using SADI.Clases;
namespace SADI.Clases.Controladores {
	public class SeccionesController : Metodos {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public SeccionesController(){

		}
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~SeccionesController(){

		}

		/// <summary>
		/// Método Para Actualizar los Registros
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo SeccionesModel</param>
		public override bool ActualizarRegistro(Object o){

			if(o.GetType() == typeof(SeccionesModel))// Verificacr si el Objeto es del Tipo SeccionesModel
            {
                var s = (SeccionesModel)o; // Castear la variable "s" al tipo SeccionesModel

                if(Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear Lista de Parámetros 
                        lista.Add(new Parametros(@"opc", "3")); // Indicarle la opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", s.Id.ToString())); // Indicarle la Identificación de la Sección
                        lista.Add(new Parametros(@"seccion", s.Seccion.ToString())); // Indicarle la Descripción de la Sección

                        string proce = "sp_secciones_crud"; // Indicarle el nombre del procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Intentar ejecutar el procedimiento
                        { return true; }// Ejecución Exitosa, ver Tabla
                        else
                        { return false; }// Ejecución NO Exitosa, ver Error
                    }
                    catch(Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false; // Indicar que existe el Error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento Fallido, Ver Error
            }
            else
            { return false; }// No es del tipo SeccionesModel
		}

		/// <summary>
		/// Método Para Consultar un Registro
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo SeccionesModel</param>
		public override bool ConsultarRegistro(Object o){

            if (o.GetType() == typeof(SeccionesModel))// Verificacr si el Objeto es del Tipo SeccionesModel
            {
                var s = (SeccionesModel)o; // Castear la variable "s" al tipo SeccionesModel

                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear Lista de Parámetros 
                        lista.Add(new Parametros(@"opc", "3")); // Indicarle la opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id",s.Id.ToString())); // Indicarle el Identificador del Registro
                        lista.Add(new Parametros(@"seccion", string.Empty)); // Vacío

                        string proce = "sp_secciones_crud"; // Indicarle el nombre del procedimiento

                        if (ConsultarProcedimiento(proce, lista))// Intentar consultar el procedimiento
                        { return true; }// Consulta Exitosa, ver Tabla
                        else
                        { return false; }// Consulta NO Exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false; // Indicar que existe el Error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento Fallido, Ver Error
            }
            else
            { return false; }// No es del tipo SeccionesModel
        }

		/// <summary>
		/// Método para Consultar Todos los Registros
		/// </summary>
		/// <returns>Boleano</returns>
		public override bool ConsultarRegistros(){

            if (Abrir())// Intentar Abrir la Conexión
            {
                // Intento Exitoso
                try
                {
                    List<Parametros> lista = new List<Parametros>();// Crear Lista de Parámetros 
                    lista.Add(new Parametros(@"opc", "1")); // Indicarle la opción a ejecutar dentro del procedimiento
                    lista.Add(new Parametros(@"id", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"seccion", string.Empty)); // Vacío

                    string proce = "sp_secciones_crud"; // Indicarle el nombre del procedimiento

                    if (ConsultarProcedimiento(proce, lista))// Intentar consultar el procedimiento
                    { return true; }// Consulta Exitosa, ver Tabla
                    else
                    { return false; }// Consulta NO Exitosa, ver Error
                }
                catch (Exception e)// Atrapar el Error
                {
                    Error = e.Message.ToString(); // Guardar el Error
                    return false; // Indicar que existe el Error
                }
                finally { Cerrar(); }// Cerrar la conexión
            }
            else
            { return false; }// Intento Fallido, Ver Error
        }

		/// <summary>
		/// Método para Ingresar un Registro
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo SeccionesModel</param>
		public override bool IngresarRegisto(Object o){

            if (o.GetType() == typeof(SeccionesModel))// Verificacr si el Objeto es del Tipo SeccionesModel
            {
                var s = (SeccionesModel)o; // Castear la variable "s" al tipo SeccionesModel

                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear Lista de Parámetros 
                        lista.Add(new Parametros(@"opc", "2")); // Indicarle la opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", s.Id.ToString())); // Indicarle la Identificación de la Sección
                        lista.Add(new Parametros(@"seccion", s.Seccion.ToString())); // Indicarle la Descripción de la Sección

                        string proce = "sp_secciones_crud"; // Indicarle el nombre del procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Intentar ejecutar el procedimiento
                        { return true; }// Ejecución Exitosa
                        else
                        { return false; }// Ejecución NO Exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false; // Indicar que existe el Error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento Fallido, Ver Error
            }
            else
            { return false; }// No es del tipo SeccionesModel
        }

	}//end SeccionesController

}//end namespace Controladores