///////////////////////////////////////////////////////////
//  FondosController.cs
//  Implementation of the Class FondosController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:34
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SiCGA.Clases.Modelos; // Acceder a los Modelos


using SiCGA.Clases;
namespace SiCGA.Clases.Controladores
{
    /// <summary>
    /// Controlador para el Modelo Fondos
    /// </summary>
    public class FondosController : Metodos
    {

        public FondosController()
        {

        }

        ~FondosController()
        {

        }

        /// <summary>
        /// Método Para Actualizar los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo class</param>
        public override bool ActualizarRegistro(Object o)
        {

            if (o.GetType() == typeof(FondosModel))// Verificar si el Objeto es del tipo FondosModel
            {
                var f = (FondosModel)o; // Castear variable al tipo FondosModel
                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitoso al Abrir Conexión
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "3"));// Actualiar el Fondo
                        lista.Add(new Parametros(@"id", f.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", f.Fondo));

                        string proce = "sp_fondos_crud";

                        if (EjecutarProcedimiento(proce, lista))
                        { return true; }// Ejecución Exitosa
                        else
                        { return false; }// Ejecución NO Exitosa
                    }
                    catch (Exception e)// Cachar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false; // Indicar que no se ejecutó el procedimiento
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento fallido al abrir la conexión, ver Error
            }
            else
            { return false; }// No es del tipo FondosModel
        }

        /// <summary>
        /// Método Para Consultar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo class</param>
        public override bool ConsultarRegistro(Object o)
        {

            if (o.GetType() == typeof(FondosModel))// Verificar que el Objeto sea del tipo FondosModel
            {
                var f = (FondosModel)o; // Castear la variable al tipo FondosModel

                if(Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitosos
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4")); // Indicar la opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", f.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", f.Fondo));

                        string proce = "sp_fondos_crud";

                        if(ConsultarProcedimiento(proce,lista))
                        { return true; }// Consulta exitosa
                        else
                        { return false; }// Consulta NO Exitosa, Consultar Error
                    }
                    catch(Exception e)// Cachar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar Consulta NO Exitosa
                    }
                    finally { Cerrar(); }// Cerrar la Conexión
                }
                else
                { return false; }// Conexión NO Exitosa, Consultar Error
            }
            else
            { return false; }// No es del mismo tipo, Consutlar Error
        }

        /// <summary>
        /// Método para Consultar Todos los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        public override bool ConsultarRegistros()
        {
            if (Abrir())// Intentar Abrir la Conexión
            {
                try
                {
                    // Intento exitoso
                    List<Parametros> lista = new List<Parametros>();
                    lista.Add(new Parametros(@"opc", "1"));// Indicar la opción a ejecutar dentro del procedimiento
                    lista.Add(new Parametros(@"id", string.Empty));// NO ocupa valor este parámetro
                    lista.Add(new Parametros(@"fondo", string.Empty));// No ocupa valor este parámetro

                    string proce = "sp_fondos_crud";

                    if (ConsultarProcedimiento(proce, lista))
                    { return true; }// Consulta Exitosa
                    else
                    { return false; }// Consulta NO exitosa, consultar Error
                }
                catch(Exception e)// Cachar Error
                {
                    Error = e.Message.ToString();// Guardar el error
                    return false; // Inidicar Operación NO Exitosa, Consultar Error

                }
                finally { Cerrar(); }// Cerrar la conexión
            }
            else
            { return false; }// Intento fallido, Consultar Error
        }

        /// <summary>
        /// Método para Ingresar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo Class</param>
        public override bool IngresarRegisto(Object o)
        {
            if (o.GetType() == typeof(FondosModel))// Verificar que el objeto sea del tipo FondosModel
            {
                var f = (FondosModel)o; // Castear la variable F al tipo FondosModel

                if(Abrir())// intentar abrir la conexión
                {
                    // Intento exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "2"));// Indicarle la opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", f.Id.ToString()));// Identificador del Fondo
                        lista.Add(new Parametros(@"fondo", f.Fondo)); // Descripción del Fondo

                        string proce = "sp_fondos_crud";

                        if(EjecutarProcedimiento(proce,lista))
                        { return true; } // Ejecución Exitosa
                        else
                        { return false; }// Ejecución NO exitosa, Cosnultar Error
                    }
                    catch(Exception e)// Cachar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar operación fallida, Consultar Error
                    }
                    finally { Cerrar(); }// Cerrar la Conexión
                }
                else
                { return false; }// Intento de conexión fallido
            }
            else
            { return false; }// No es del tipo FondosModel
        }

    }//end FondosController

}//end namespace Controladores