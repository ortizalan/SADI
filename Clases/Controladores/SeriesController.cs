///////////////////////////////////////////////////////////
//  SeriesController.cs
//  Implementation of the Class SeriesController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:56
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SADI.Clases;
using SADI.Clases.Modelos;

namespace SADI.Clases.Controladores
{
    /// <summary>
    /// Controlador para el Modelo Series
    /// </summary>
    public class SeriesController : Metodos
    {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public SeriesController()
        {

        }
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~SeriesController()
        {

        }

        /// <summary>
        /// Método Para Actualizar los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo class</param>
        public override bool ActualizarRegistro(Object o)
        { 
            if(o.GetType() == typeof(SeriesModel))//Varificar que el objeto sea del tipo Modelo Series
            {
                //Si son del mismo tipo
                var s = (SeriesModel)o;// Castear la variable "s" al tipo SeriesModel

                string proce = "sp_series_crud";//Nombre del Procedimiento
                List<Parametros> lista = new List<Parametros>();//Lista de Parámetros
                lista.Add(new Parametros(@"opc", "3"));//Opción a Ejecutar en el Procedimiento
                lista.Add(new Parametros(@"id", s.Id.ToString()));//Identificador de la Serie
                lista.Add(new Parametros(@"sec", s.Seccion.Id));//Identificador de la Sección
                lista.Add(new Parametros(@"serie", s.Serie));//Descripción de la Serie

                if(Abrir())//Intentar Abrir la Conexión
                {
                    //Intento Exitoso
                    try
                    {
                        if(EjecutarProcedimiento(proce,lista))//Intentar ejecutar el procedimiento
                        { return true; }//Intento Exitoso
                        else//Intento NO Exitoso, Consultar Error
                        { return false; }
                    }
                    catch(Exception e)//Atrapar Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe el error
                    }
                    finally { Cerrar(); }//Cerrar la conexión
                }
                else//Intento NO Exitoso, Consultar Error
                {
                    return false;
                }
            }
            else//No son del mismo tipo
            {
                Error = "ol objeto no es del tipo SeriesModel.";
                return false;
            }
        }

        /// <summary>
        /// Método Para Consultar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo class</param>
        public override bool ConsultarRegistro(Object o)
        {

            if (o.GetType() == typeof(SeriesModel))//Varificar que el objeto sea del tipo Modelo Series
            {
                //Si son del mismo tipo
                var s = (SeriesModel)o;// Castear la variable "s" al tipo SeriesModel

                string proce = "sp_series_crud";//Nombre del Procedimiento
                List<Parametros> lista = new List<Parametros>();//Lista de Parámetros
                lista.Add(new Parametros(@"opc", "4"));//Opción a Ejecutar en el Procedimiento
                lista.Add(new Parametros(@"id", s.Id.ToString()));//Identificador de la Serie
                lista.Add(new Parametros(@"sec", s.Seccion.Id));//Identificador de la Sección
                lista.Add(new Parametros(@"serie", string.Empty));//Vacío

                if (Abrir())//Intentar Abrir la Conexión
                {
                    //Intento Exitoso
                    try
                    {
                        if (EjecutarProcedimiento(proce, lista))//Intentar ejecutar el procedimiento
                        { return true; }//Intento Exitoso
                        else//Intento NO Exitoso, Consultar Error
                        { return false; }
                    }
                    catch (Exception e)//Atrapar Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe el error
                    }
                    finally { Cerrar(); }//Cerrar la conexión
                }
                else//Intento NO Exitoso, Consultar Error
                {
                    return false;
                }
            }
            else//No son del mismo tipo
            {
                Error = "ol objeto no es del tipo SeriesModel.";
                return false;
            }
        }

        /// <summary>
        /// Método para Consultar Todos los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        public override bool ConsultarRegistros()
        {

                string proce = "sp_series_crud";//Nombre del Procedimiento
                List<Parametros> lista = new List<Parametros>();//Lista de Parámetros
                lista.Add(new Parametros(@"opc", "1"));//Opción a Ejecutar en el Procedimiento
                lista.Add(new Parametros(@"id", string.Empty));//Identificador de la Serie
                lista.Add(new Parametros(@"sec", string.Empty));//Identificador de la Sección
                lista.Add(new Parametros(@"serie", string.Empty));//Descripción de la Serie

                if (Abrir())//Intentar Abrir la Conexión
                {
                    //Intento Exitoso
                    try
                    {
                        if (EjecutarProcedimiento(proce, lista))//Intentar ejecutar el procedimiento
                        { return true; }//Intento Exitoso
                        else//Intento NO Exitoso, Consultar Error
                        { return false; }
                    }
                    catch (Exception e)//Atrapar Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe el error
                    }
                    finally { Cerrar(); }//Cerrar la conexión
                }
                else//Intento NO Exitoso, Consultar Error
                {
                    return false;
                }
        }

        /// <summary>
        /// Método para Ingresar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo Class</param>
        public override bool IngresarRegisto(Object o)
        {
            if (o.GetType() == typeof(SeriesModel))//Varificar que el objeto sea del tipo Modelo Series
            {
                //Si son del mismo tipo
                var s = (SeriesModel)o;// Castear la variable "s" al tipo SeriesModel

                string proce = "sp_series_crud";//Nombre del Procedimiento
                List<Parametros> lista = new List<Parametros>();//Lista de Parámetros
                lista.Add(new Parametros(@"opc", "2"));//Opción a Ejecutar en el Procedimiento
                lista.Add(new Parametros(@"id", s.Id.ToString()));//Identificador de la Serie
                lista.Add(new Parametros(@"sec", s.Seccion.Id));//Identificador de la Sección
                lista.Add(new Parametros(@"serie", s.Serie));//Descripción de la Serie

                if (Abrir())//Intentar Abrir la Conexión
                {
                    //Intento Exitoso
                    try
                    {
                        if (EjecutarProcedimiento(proce, lista))//Intentar ejecutar el procedimiento
                        { return true; }//Intento Exitoso
                        else//Intento NO Exitoso, Consultar Error
                        { return false; }
                    }
                    catch (Exception e)//Atrapar Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe el error
                    }
                    finally { Cerrar(); }//Cerrar la conexión
                }
                else//Intento NO Exitoso, Consultar Error
                {
                    return false;
                }
            }
            else//No son del mismo tipo
            {
                Error = "ol objeto no es del tipo SeriesModel.";
                return false;
            }
        }
        /// <summary>
        /// Función para Consultar Las Series Relacionadas a una Sección
        /// </summary>
        /// <param name="o">Objeto del Tipo SeriesModel</param>
        /// <returns>Boleano</returns>
        public bool ConsultarSeriesPorSeccion(Object o)
        {
            if (o.GetType() == typeof(SeriesModel))//Verificar si el Objeto es del tipo SeriesModel
            {
                //Si es del mismo tipo

                var s = (SeriesModel)o;//Castear la variable "s" al tipo del Modelo

                if (Abrir())//Intentar abrir la Conexión
                {
                    //Intento Exitoso
                    try
                    {
                        //Sentencia SQL
                        string sente = "select * from Series where seccion = '" + s.Seccion.Id + "' order by Serie";

                        if (ConsultarSentenciaSQL(sente))//Realizar la consulta por medio de Sentica
                        { return true; }//Consulta Exitosa
                        else
                        { return false; }//Consulta NO Exitosa, Consultar Error
                    }
                    catch (Exception e)//Atrapar el Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe el error
                    }
                    finally { Cerrar(); }//Cerrar la Conexión
                }
                else//Intento NO Exitoso, Consultar Error
                { return false; }
            }
            else//No son del mismo tipo
            { return false; }
        }
        /// <summary>
        /// Consultar las Series Asignadas al Usuario por su Sección
        /// </summary>
        /// <param name="o">Objeto del Tipo AtributosModel</param>
        /// <returns>Boleano</returns>
        public bool ConsultarSeriexSeccionUsuario(Object o)
        {
            if(o.GetType() == typeof(AtributosModel))//Validar que el Objeto sea del Modelo Series
            {
                //Si son del mismo tipo
                var am = (AtributosModel)o;
                try
                {
                    if (Abrir())//Intentar Abrir la Conexión
                    {
                        string proce = "sp_combos_usuarios_atributos";// Nombre del Procedimiento
                        List<Parametros> lista = new List<Parametros>();//Lista de Parámetros
                        lista.Add(new Parametros(@"opc", "2"));//Indicarle la opción a ejecutar
                        lista.Add(new Parametros(@"usr", am.Usuario.Id.ToString()));//Identificador del Usuario
                        lista.Add(new Parametros(@"sec", am.Seccion.Id));//Identificador de la Sección
                        lista.Add(new Parametros(@"ser", string.Empty));//Vacío

                        if (ConsultarProcedimiento(proce, lista))//Intentar Ejecutar el Procedimiento
                        { return true; }//Intento Exitoso
                        else//Intento NO Exitoso, Consultar Error
                        { return false; }
                    }
                    else//Intento NO Exitoso, Consultar Error
                    {
                        return false;
                    }
                }
                catch(Exception e)//Atrapar el Error
                {
                    Error = e.Message.ToString();//Guardar el Error
                    return false;//Indicar que existe el Error
                }
                finally { Cerrar(); }//Cerrar la Conexión
            }
            else//No son del mismo tipo, COnsultar Error
            {
                Error = "el objeto enviado a la función, no es del modelo de series.";
                return false;
            }
        }

    }//end SeriesController

}//end namespace Controladores