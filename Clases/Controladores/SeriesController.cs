///////////////////////////////////////////////////////////
//  SeriesController.cs
//  Implementation of the Class SeriesController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:56
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SADI.Clases;
using SADI.Clases.Modelos;


namespace SADI.Clases.Controladores
{
    /// <summary>
    /// Controlador para el Modelo Series
    /// </summary>
    public class SeriesController : Metodos
    {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public SeriesController()
        {

        }
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~SeriesController()
        {

        }

        /// <summary>
        /// Método Para Actualizar los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo class</param>
        public override bool ActualizarRegistro(Object o)
        {

            return false;
        }

        /// <summary>
        /// Método Para Consultar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo class</param>
        public override bool ConsultarRegistro(Object o)
        {

            return false;
        }

        /// <summary>
        /// Método para Consultar Todos los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        public override bool ConsultarRegistros()
        {

            return false;
        }

        /// <summary>
        /// Método para Ingresar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo Class</param>
        public override bool IngresarRegisto(Object o)
        {

            return false;
        }
        /// <summary>
        /// Función para Consultar Las Series Relacionadas a una Sección
        /// </summary>
        /// <param name="o">Objeto del Tipo SeriesModel</param>
        /// <returns>Boleano</returns>
        public bool ConsultarSeriesPorSeccion(Object o)
        {
            if (o.GetType() == typeof(SeriesModel))//Verificar si el Objeto es del tipo SeriesModel
            {
                //Si es del mismo tipo

                var s = (SeriesModel)o;//Castear la variable "s" al tipo del Modelo

                if (Abrir())//Intentar abrir la Conexión
                {
                    //Intento Exitoso
                    try
                    {
                        //Sentencia SQL
                        string sente = "select * from Series where seccion = '" + s.Seccion.Id + "' order by Serie";

                        if (ConsultarSentenciaSQL(sente))//Realizar la consulta por medio de Sentica
                        { return true; }//Consulta Exitosa
                        else
                        { return false; }//Consulta NO Exitosa, Consultar Error
                    }
                    catch (Exception e)//Atrapar el Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe el error
                    }
                    finally { Cerrar(); }//Cerrar la Conexión
                }
                else//Intento NO Exitoso, Consultar Error
                { return false; }
            }
            else//No son del mismo tipo
            { return false; }
        }

        public bool ConsultarSeriexSeccionUsuario(List<Series> lista, SeriesModel sm)
        {
            if(lista.Count > 0)//Verificar que tenga parámetros
            {
                string sente = "select * from series where seccion = '" + sm.Seccion.Id + "' and IdSerie in (";//Primer parte de la sentencia
                int y = lista.Count - 1;//Número de elementos de la lista
                int x = 0;//Contador
                foreach(Series s in lista)//Barrer la lista de series
                {
                    if(x == y)//Ver si es el último elemento en la lista
                    {
                        sente += s.Serie + ")";//final de la sentencia
                    }
                    else//no es el úlitmo elemento en la lista
                    {
                        sente += s.Serie + ",";//Constinuidad de la Sentencia
                    }

                    x += 1;//aumentar el contador
                }

                if(Abrir())//Intentar Abrir la Conexión
                {
                    try
                    {
                        if(ConsultarSentenciaSQL(sente))//Intentar consultar la sentencia
                        { return true; }//intento exitoso
                        else//Intento No Exitoso, Consultar Error
                        { return false; }
                    }
                    catch(Exception e)//Atrapar el Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe un error
                    }
                    finally { Cerrar(); }//Cerrar Conexión
                }
                else//Intento NO Exitoso, Consultar Error
                {
                    return false;
                }
            }
            else//No existen 
            {
                Error = "No Existen Elementos en la Lista Series.";//Error 
                return false;
            }
        }

    }//end SeriesController

}//end namespace Controladores