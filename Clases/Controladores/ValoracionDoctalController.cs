///////////////////////////////////////////////////////////
//  ValoracionDoctalController.cs
//  Implementation of the Class ValoracionDoctalController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:19:11
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SiCGA.Clases.Modelos;



using SiCGA.Clases;
namespace SiCGA.Clases.Controladores {
	/// <summary>
	/// Controlador para el Modelo ValoracionDoctal
	/// </summary>
	public class ValoracionDoctalController : Metodos {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public ValoracionDoctalController(){

		}
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~ValoracionDoctalController(){

		}

		/// <summary>
		/// Método Para Consultar un Registro
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo ValoracionDoctalModel</param>
		public override bool ConsultarRegistro(Object o){

			if(o.GetType() == typeof(ValoracionDoctalModel))// Validar que el Objeto sea del Tipo ValoracionDoctalModel
            {
                if(Abrir())// Intentar Abrir la Conexión
                {
                    // Intento exitoso
                    var vd = (ValoracionDoctalModel)o; // Castear la varibale "vd" al Modelo

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4"));// Indicar la Opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", vd.Id.ToString()));// Indicar el Identificador del Registro
                        lista.Add(new Parametros(@"valoracion", string.Empty)); // Vacío

                        string proce = "sp_valoraciondoctal_crud";// Indicar el nombre del procedimiento

                        if (ConsultarProcedimiento(proce, lista))// Consultar el procedimiento
                        { return true; }//Consulta Existosa, ver Tabla
                        else
                        { return false; }// Consulta NO Exitosa, ver Error
                    }
                    catch(Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar que Existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexion
                }
                else
                { return false; }// intento fallido para Abrir la Conexión
            }
            else
            { return false; }// Objeto no es del tipo del Modelo
		}

		/// <summary>
		/// Método Para Actualizar los Registros
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo ValoracionDoctalModel</param>
		public override bool ActualizarRegistro(Object o){

            if (o.GetType() == typeof(ValoracionDoctalModel))// Validar que el Objeto sea del Tipo ValoracionDoctalModel
            {
                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento exitoso
                    var vd = (ValoracionDoctalModel)o; // Castear la varibale "vd" al Modelo

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "3"));// Indicar la Opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", vd.Id.ToString()));// Indicar el Identificador del Registro
                        lista.Add(new Parametros(@"valoracion", vd.Valoracion)); // Descripción de la Valoración Documental

                        string proce = "sp_valoraciondoctal_crud";// Indicar el nombre del procedimiento

                        if (ConsultarProcedimiento(proce, lista))// Consultar el procedimiento
                        { return true; }//Ejecución Existosa
                        else
                        { return false; }// Ejecución NO Exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar que Existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexion
                }
                else
                { return false; }// intento fallido para Abrir la Conexión
            }
            else
            { return false; }// Objeto no es del tipo del Modelo
        }

		/// <summary>
		/// Método para Ingresar un Registro
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo ValoracionDoctalModel</param>
		public override bool IngresarRegisto(Object o){

            if (o.GetType() == typeof(ValoracionDoctalModel))// Validar que el Objeto sea del Tipo ValoracionDoctalModel
            {
                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento exitoso
                    var vd = (ValoracionDoctalModel)o; // Castear la varibale "vd" al Modelo

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "2"));// Indicar la Opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", string.Empty));// Vacío
                        lista.Add(new Parametros(@"valoracion", vd.Valoracion)); // Descripción de la Valoración

                        string proce = "sp_valoraciondoctal_crud";// Indicar el nombre del procedimiento

                        if (ConsultarProcedimiento(proce, lista))// Consultar el procedimiento
                        { return true; }//Consulta Existosa, ver Tabla
                        else
                        { return false; }// Consulta NO Exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar que Existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexion
                }
                else
                { return false; }// intento fallido para Abrir la Conexión
            }
            else
            { return false; }// Objeto no es del tipo del Modelo
        }

		/// <summary>
		/// Método para Consultar Todos los Registros
		/// </summary>
		/// <returns>Boleano</returns>
		public override bool ConsultarRegistros(){

            if (Abrir())// Intentar Abrir la Conexión
            {
                // Intento exitoso
                
                try
                {
                    List<Parametros> lista = new List<Parametros>();
                    lista.Add(new Parametros(@"opc", "1"));// Indicar la Opción a ejecutar dentro del procedimiento
                    lista.Add(new Parametros(@"id", string.Empty));// Vacío
                    lista.Add(new Parametros(@"valoracion", string.Empty)); // Vacío

                    string proce = "sp_valoraciondoctal_crud";// Indicar el nombre del procedimiento

                    if (ConsultarProcedimiento(proce, lista))// Consultar el procedimiento
                    { return true; }//Consulta Existosa, ver Tabla
                    else
                    { return false; }// Consulta NO Exitosa, ver Error
                }
                catch (Exception e)// Atrapar el Error
                {
                    Error = e.Message.ToString();// Guardar el Error
                    return false;// Indicar que Existe un error
                }
                finally { Cerrar(); }// Cerrar la Conexion
            }
            else
            { return false; }// intento fallido para Abrir la Conexión
        }

	}//end ValoracionDoctalController

}//end namespace Controladores