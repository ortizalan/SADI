///////////////////////////////////////////////////////////
//  ContenidoCajasController.cs
//  Implementation of the Class ContenidoCajasController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:32
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SADI.Clases.Modelos;


using SADI.Clases;
namespace SADI.Clases.Controladores
{
    public class ContenidoCajasController : Metodos
    {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public ContenidoCajasController()
        {

        }
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~ContenidoCajasController()
        {

        }

        /// <summary>
        /// Métdo para la Consulta de un Registro
        /// </summary>
        /// <param name="o">Objeto del tipo ContenidoCajasModel</param>
        /// <returns>Boleano</returns>
        public override bool ConsultarRegistro(object o)
        {

            if (o.GetType() == typeof(ContenidoCajasModel))// Verificar que Objeto sea del tipo ContenidoCajasController
            {
                var cc = (ContenidoCajasModel)o; // Castear variable "cc" al tipo ContenidoCajasModel

                if (Abrir())// Intentar abrir la conexión
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear lista de Parámetros
                        lista.Add(new Parametros(@"opc", "4"));// Enviar opción al procedimiento
                        lista.Add(new Parametros(@"id", cc.Id.ToString()));// Enviar identificador al procedimiento
                        lista.Add(new Parametros(@"caja", string.Empty));// vacío
                        lista.Add(new Parametros(@"seriedoc", string.Empty));// vacío 

                        string proce = "sp_contenidocajas_crud"; // Indicar el nombre del procedimiento

                        if (ConsultarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                        { return true; }// Consulta Exitosa, Consultar Tabla
                        else
                        { return false; }// Consulta NO Existosa, Consultar Error
                    }
                    catch (Exception e)// Cachar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar que existe el error
                    }
                    finally { Cerrar(); }// Cerrar conexión
                }
                else
                { return false; }// Intento NO Exitoso, consultar Error
            }
            else
            { return false; }// NO son del mismo tipo
        }

        /// <summary>
        /// Método para Actualizar Registro del Modelo
        /// </summary>
        /// <param name="o">Objeto del Tipo ContenidoCajasModel</param>
        /// <returns>Boleano</returns>
        public override bool ActualizarRegistro(object o)
        {

            if (o.GetType() == typeof(ContenidoCajasModel))// Verificar que Objeto sea del tipo ContenidoCajasController
            {
                var cc = (ContenidoCajasModel)o; // Castear variable "cc" al tipo ContenidoCajasModel

                if (Abrir())// Intentar abrir la conexión
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear lista de Parámetros
                        lista.Add(new Parametros(@"opc", "3"));// Enviar opción al procedimiento
                        lista.Add(new Parametros(@"id", cc.Id.ToString()));// Enviar identificador al procedimiento
                        lista.Add(new Parametros(@"caja", cc.Caja.ToString()));// Identificador de la Caja
                        lista.Add(new Parametros(@"seriedoc", cc.SerieDoctal.SerieDoctal));// Identificador de la Serie Documental 

                        string proce = "sp_contenidocajas_crud"; // Indicar el nombre del procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Intentar Ejecutar el Procedimiento
                        { return true; }// Ejecución Exitosa, Consultar Tabla
                        else
                        { return false; }// Ejecución NO Existosa, Consultar Error
                    }
                    catch (Exception e)// Cachar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar que existe el error
                    }
                    finally { Cerrar(); }// Cerrar conexión
                }
                else
                { return false; }// Intento NO Exitoso, consultar Error
            }
            else
            { return false; }// NO son del mismo tipo
        }
        /// <summary>
        /// Método para Ingresar Registro al Modelo
        /// </summary>
        /// <param name="o">Objeto del tipo ContenidoCajasModel</param>
        /// <returns>Boleano</returns>
        public override bool IngresarRegisto(object o)
        {

            if (o.GetType() == typeof(ContenidoCajasModel))// Verificar que Objeto sea del tipo ContenidoCajasController
            {
                var cc = (ContenidoCajasModel)o; // Castear variable "cc" al tipo ContenidoCajasModel

                if (Abrir())// Intentar abrir la conexión
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear lista de Parámetros
                        lista.Add(new Parametros(@"opc", "2"));// Enviar opción al procedimiento
                        lista.Add(new Parametros(@"id", cc.Id.ToString()));// Enviar identificador al procedimiento
                        lista.Add(new Parametros(@"caja", cc.Caja.ToString()));// Identificador de la Caja
                        lista.Add(new Parametros(@"seriedoc", cc.SerieDoctal.SerieDoctal));// Identificador de la Serie Documental 

                        string proce = "sp_contenidocajas_crud"; // Indicar el nombre del procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Intentar Ejecutar el Procedimiento
                        { return true; }// Ejecución Exitosa, Consultar Tabla
                        else
                        { return false; }// Ejecución NO Existosa, Consultar Error
                    }
                    catch (Exception e)// Cachar el Error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar que existe el error
                    }
                    finally { Cerrar(); }// Cerrar conexión
                }
                else
                { return false; }// Intento NO Exitoso, consultar Error
            }
            else
            { return false; }// NO son del mismo tipo
        }
        /// <summary>
        /// Método para Consultar Todos los Registros
        /// </summary>
        /// <returns>Boleano</returns>
		public override bool ConsultarRegistros()
        {

            if (Abrir())// Intentar abrir la conexión
            {
                try
                {
                    List<Parametros> lista = new List<Parametros>();// Crear lista de Parámetros
                    lista.Add(new Parametros(@"opc", "1"));// Enviar opción al procedimiento
                    lista.Add(new Parametros(@"id", string.Empty));// Enviar identificador al procedimiento
                    lista.Add(new Parametros(@"caja", string.Empty));// vacío
                    lista.Add(new Parametros(@"seriedoc", string.Empty));// vacío 

                    string proce = "sp_contenidocajas_crud"; // Indicar el nombre del procedimiento

                    if (ConsultarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                    { return true; }// Consulta Exitosa, Consultar Tabla
                    else
                    { return false; }// Consulta NO Existosa, Consultar Error
                }
                catch (Exception e)// Cachar el Error
                {
                    Error = e.Message.ToString();// Guardar el Error
                    return false;// Indicar que existe el error
                }
                finally { Cerrar(); }// Cerrar conexión
            }
            else
            { return false; }// Intento de Abrir conexión NO Exitoso, Consultar Error
        }
    }//end ContenidoCajasController

}//end namespace Controladores