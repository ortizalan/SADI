///////////////////////////////////////////////////////////
//  ValoresDoctalesController.cs
//  Implementation of the Class ValoresDoctalesController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:19:12
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SiCGA.Clases.Modelos;



using SiCGA.Clases;
namespace SiCGA.Clases.Controladores {
	/// <summary>
	/// Controlador para el Modelo ValoresDoctales
	/// </summary>
	public class ValoresDoctalesController : Metodos {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public ValoresDoctalesController(){

		}
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~ValoresDoctalesController(){

		}

		/// <summary>
		/// Método Para Consultar un Registro
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo ValoresDoctalesModel</param>
		public override bool ConsultarRegistro(Object o){

            if (o.GetType() == typeof(ValoresDoctalesModel))// Verificar que el Objeto sea del Tipo ValoresDoctalesModel
            {
                var vd = (ValoresDoctalesModel)o; // Castear variable "vd" al Modelo

                if (Abrir())// Intentar abrir la conexión
                {
                    // Intento exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4"));// Indicar la Opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", vd.Id.ToString()));//Indicar el Identificador del registro
                        lista.Add(new Parametros(@"valor", string.Empty)); // Vacío

                        string proce = "sp_valoresdoctales_crud";// Indicar el nombre del procedimiento

                        if(ConsultarProcedimiento(proce,lista))//Consultar el Procedimiento
                        { return true; }//Consulta Exitosa, ver Tabla
                        else
                        { return false; }// Consulta NO Exitosa, ver Error
                    }
                    catch(Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false; // Indicar que existe el error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento fallido al abrir conexión
            }
            else
            { return false; }// No son del mismo tipo
		}

		/// <summary>
		/// Método Para Actualizar los Registros
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo ValoresDoctalesModel</param>
		public override bool ActualizarRegistro(Object o){

            if (o.GetType() == typeof(ValoresDoctalesModel))// Verificar que el Objeto sea del Tipo ValoresDoctalesModel
            {
                var vd = (ValoresDoctalesModel)o; // Castear variable "vd" al Modelo

                if (Abrir())// Intentar abrir la conexión
                {
                    // Intento exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "3"));// Indicar la Opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", vd.Id.ToString()));//Indicar el Identificador del registro
                        lista.Add(new Parametros(@"valor", vd.Valor)); // Descripción del Valor Documental

                        string proce = "sp_valoresdoctales_crud";// Indicar el nombre del procedimiento

                        if (EjecutarProcedimiento(proce, lista))//Ejecutar el Procedimiento
                        { return true; }//Ejecución Exitosa, ver Tabla
                        else
                        { return false; }// Ejecución NO Exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false; // Indicar que existe el error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento fallido al abrir conexión
            }
            else
            { return false; }// No son del mismo tipo
        }

		/// <summary>
		/// Método para Ingresar un Registro
		/// </summary>
		/// <returns>Boleano</returns>
		/// <param name="o">Objeto del Tipo ValoresDoctalesModel</param>
		public override bool IngresarRegisto(Object o){

            if (o.GetType() == typeof(ValoresDoctalesModel))// Verificar que el Objeto sea del Tipo ValoresDoctalesModel
            {
                var vd = (ValoresDoctalesModel)o; // Castear variable "vd" al Modelo

                if (Abrir())// Intentar abrir la conexión
                {
                    // Intento exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "2"));// Indicar la Opción a ejecutar dentro del procedimiento
                        lista.Add(new Parametros(@"id", string.Empty));//vacío
                        lista.Add(new Parametros(@"valor", vd.Valor)); // Descripción del Valor Documental

                        string proce = "sp_valoresdoctales_crud";// Indicar el nombre del procedimiento

                        if (EjecutarProcedimiento(proce, lista))//Ejecutar el Procedimiento
                        { return true; }//Ejecución Exitosa, ver Tabla
                        else
                        { return false; }// Ejecución NO Exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false; // Indicar que existe el error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento fallido al abrir conexión
            }
            else
            { return false; }// No son del mismo tipo
        }

		/// <summary>
		/// Método para Consultar Todos los Registros
		/// </summary>
		/// <returns>Boleano</returns>
		public override bool ConsultarRegistros(){

            if (Abrir())// Intentar abrir la conexión
            {
                // Intento exitoso
                try
                {
                    List<Parametros> lista = new List<Parametros>();
                    lista.Add(new Parametros(@"opc", "1"));// Indicar la Opción a ejecutar dentro del procedimiento
                    lista.Add(new Parametros(@"id", string.Empty));//vacío
                    lista.Add(new Parametros(@"valor", string.Empty)); // Vacío

                    string proce = "sp_valoresdoctales_crud";// Indicar el nombre del procedimiento

                    if (ConsultarProcedimiento(proce, lista))//Consultar el Procedimiento
                    { return true; }//Consulta Exitosa, ver Tabla
                    else
                    { return false; }// Consulta NO Exitosa, ver Error
                }
                catch (Exception e)// Atrapar el Error
                {
                    Error = e.Message.ToString(); // Guardar el Error
                    return false; // Indicar que existe el error
                }
                finally { Cerrar(); }// Cerrar la conexión
            }
            else
            { return false; }// Intento fallido al abrir conexión
        }

	}//end ValoresDoctalesController

}//end namespace Controladores