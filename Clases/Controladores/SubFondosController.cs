///////////////////////////////////////////////////////////
//  SubFondosController.cs
//  Implementation of the Class SubFondosController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:59
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SiCGA.Clases.Modelos;



using SiCGA.Clases;
namespace SiCGA.Clases.Controladores
{
    /// <summary>
    /// Controlador para el Modelo SubFondos
    /// </summary>
    public class SubFondosController : Metodos
    {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
        public SubFondosController()
        {

        }
        /// <summary>
        /// Desctructor de la Clase
        /// </summary>
        ~SubFondosController()
        {

        }

        /// <summary>
        /// Método Para Consultar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo SubFondosModel</param>
        public override bool ConsultarRegistro(Object o)
        {
            if (o.GetType() == typeof(SubFondosModel))// Verificar si el Objeto es del tipo SubFondoModel
            {
                var sf = (SubFondosModel)o; // Castear la variable sf al tipo SubFondosModel

                if (Abrir())//Intentar Establecer Conexión con BD
                {

                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4"));// Mandar la opción a ejecutar al Procedimiento
                        lista.Add(new Parametros(@"id", sf.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", sf.Fondo.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", sf.SubFondo));

                        string proce = "sp_subfondos_crud";

                        if (ConsultarProcedimiento(proce, lista))// Efectuar la consulta
                        { return true; }// Exitosa, consultar Tabla
                        else
                        { return false; }// NO Exitosa, Consultar Error
                    }
                    catch (Exception e)
                    {
                        Error = e.Message.ToString();
                        return false;
                    }
                    finally { Cerrar(); }
                }
                else
                { return false; }

            }
            else
            { return false; }// No es del tipo SubFondosModel
        }

        /// <summary>
        /// Método Para Actualizar los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo SubFondosModel</param>
        public override bool ActualizarRegistro(Object o)
        {
            if (o.GetType() == typeof(SubFondosModel))// Verificar si el Objeto es del tipo SubFondosModel
            {
                var sf = (SubFondosModel)o;// Castear la Variable "sf" al tipo SubFondosModel
                if (Abrir())// Intentar Abrir la Conexión
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear la Lista de Parámetros
                        lista.Add(new Parametros(@"opc", "3"));// Indicarle la Opción dentro del Procedimiento
                        lista.Add(new Parametros(@"id", sf.Id.ToString()));// Indentificador del Registro
                        lista.Add(new Parametros(@"fondo", sf.Fondo.Id.ToString()));// Identificador del Fondo al que Pertenece
                        lista.Add(new Parametros(@"subfondo", sf.SubFondo));// Descripción del SubFondo

                        string proce = "sp_subfondo_crud";// Indicarle el Nombre del Procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Ejecutar el Procedimiento
                        { return true; }// Ejecución Exitosa
                        else
                        { return false; }// Ejecución NO exitosa, Consultar Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString();// Guardar el error
                        return false;// Indicar que existe error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// No se pudo abriri la conexión, consultar Error
            }
            else
            { return false; }// El Objeto no es del tipo SubFondosModel
        }

        /// <summary>
        /// Método para Ingresar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo SubFondosModel</param>
        public override bool IngresarRegisto(Object o)
        {
            if (o.GetType() == typeof(SubFondosModel))// Verificar si el Objeto es del tipo SubFondosModel
            {
                var sf = (SubFondosModel)o;// Castear la variable "sf al tipo SubFondosModel

                if (Abrir())// Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear Lista de Parámetros
                        lista.Add(new Parametros(@"opc", "2"));// Indicar la Opción dentro del procedimiento
                        lista.Add(new Parametros(@"id", sf.Id.ToString()));// Identificador del Registro
                        lista.Add(new Parametros(@"fondo", sf.Fondo.Id.ToString()));// Indicador del Subfondo
                        lista.Add(new Parametros(@"subfondo", sf.SubFondo));// Nombre del Subfondo

                        string proce = "sp_subfondos_crud";// Indicar el Nombre del procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Ejecutar el Procedimiento
                        { return true; } // Exitosa, Consultar Table
                        else
                        { return false; }// NO Exitosa, Consultar Error
                    }
                    catch (Exception e)// Atrapar el error
                    {
                        Error = e.Message.ToString();// Guardar el Error
                        return false;// Indicar que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la conexión
                }
                else
                { return false; }// Intento fallido de Conexión

            }
            else
            { return false; }// No es el Objeto del Tipo 
        }

        /// <summary>
        /// Método para Consultar Todos los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        public override bool ConsultarRegistros()
        {
            if (Abrir())//Intentar Establecer Conexión con BD
            {

                // Intento Exitoso
                try
                {
                    List<Parametros> lista = new List<Parametros>();
                    lista.Add(new Parametros(@"opc", "1"));// Mandar la opción a ejecutar al Procedimiento
                    lista.Add(new Parametros(@"id", string.Empty));
                    lista.Add(new Parametros(@"fondo", string.Empty));
                    lista.Add(new Parametros(@"fondo", string.Empty));

                    string proce = "sp_subfondos_crud";// Indicar el Nombre del Procedimiento

                    if (ConsultarProcedimiento(proce, lista))// Efectuar la consulta
                    { return true; }// Exitosa, consultar Tabla
                    else
                    { return false; }// NO Exitosa, Consultar Error
                }
                catch (Exception e)// Atrapar el Error
                {
                    Error = e.Message.ToString();// Guardar el Error
                    return false;// Indicar que existe el error
                }
                finally { Cerrar(); }// Cerrar la conexión
            }
            else
            { return false; }// Intento de Conexión Fallido

        }

    }//end SubFondosController

}//end namespace Controladores