///////////////////////////////////////////////////////////
//  RegistrosController.cs
//  Implementation of the Class RegistrosController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:49
//  Original author: Ing. Alan Ortiz Pèrez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SADI.Clases.Modelos;



using SADI.Clases;
namespace SADI.Clases.Controladores
{
    /// <summary>
    /// Controlador del Modelo Registros
    /// </summary>
    public class RegistrosController : Metodos
    {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public RegistrosController()
        {

        }
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~RegistrosController()
        {

        }

        /// <summary>
        /// Método para consultar 
        /// </summary>
        /// <param name="o">Objeto del Tipo RegistrosModel</param>
        /// <returns></returns>
        public override bool ConsultarRegistro(object o)
        {

            if (o.GetType() == typeof(RegistrosModel))// Verificar que el Objeto sea del Tipo RegistrosModel
            {
                if (Abrir())//Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    var r = (RegistrosModel)o; // Castear la Variable "r" al tipo RegistrosModel

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4")); // Indicarle la Opción a ejecutar al Procedimiento
                        lista.Add(new Parametros(@"seriedoc", r.SerieDoctal)); // Indicarle el Idetificador del registro
                        lista.Add(new Parametros(@"tema", string.Empty));//Vacío
                        lista.Add(new Parametros(@"fondo", string.Empty)); // Vacío
                        lista.Add(new Parametros(@"subfondo", string.Empty));// Vacío
                        lista.Add(new Parametros(@"fecini", string.Empty));// Vacío
                        lista.Add(new Parametros(@"fecfin", string.Empty));// Vacio
                        lista.Add(new Parametros(@"desc", string.Empty));// Vacío
                        lista.Add(new Parametros(@"numhojas", string.Empty)); // Vacío
                        lista.Add(new Parametros(@"cvesevi", string.Empty)); // Vacío
                        lista.Add(new Parametros(@"valordoc", string.Empty)); // Vacío
                        lista.Add(new Parametros(@"clasi", string.Empty));// Vacío
                        lista.Add(new Parametros(@"otrainfo", string.Empty));// Vacío
                        lista.Add(new Parametros(@"esta", string.Empty));// Vacio

                        string proce = "sp_registros_crud";

                        if (ConsultarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                        { return true; }// Consulta exitosa, Ver Tabla
                        else
                        { return false; }// Consulta NO exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false;// Indicar que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexión
                }
                else
                { return false; }// Intento NO Exitoso, Ver Error
            }
            else
            { return false; }// No es del tipo RegistroModel
        }
        /// <summary>
        /// Método para Actualizar Registro
        /// </summary>
        /// <param name="o">Objeto del Tipo RegistrosModel</param>
        /// <returns>Boleano</returns>
        public override bool ActualizarRegistro(object o)
        {

            if (o.GetType() == typeof(RegistrosModel))// Verificar que el Objeto sea del Tipo RegistrosModel
            {
                if (Abrir())//Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    var r = (RegistrosModel)o; // Castear la Variable "r" al tipo RegistrosModel

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear una lista de Parámetros
                        lista.Add(new Parametros(@"opc", "3")); // Indicarle la Opción a ejecutar al Procedimiento
                        lista.Add(new Parametros(@"seriedoc", r.SerieDoctal)); // Indicarle el Idetificador del registro
                        lista.Add(new Parametros(@"tema", r.Tema.Id.ToString()));//Identificador del tema de la Serie Documental
                        lista.Add(new Parametros(@"fondo", r.Fondo.Id.ToString())); // Indicarle la Identificación del Fondo
                        lista.Add(new Parametros(@"subfondo", r.SubFondo.Id.ToString()));// Indicarle la Identificación del Subfondo
                        lista.Add(new Parametros(@"fecini", r.FechaInicio.ToString("yyyy-MM-dd")));// Indicarle la Fecha de Inicio del Expediente
                        lista.Add(new Parametros(@"fecfin", (r.FechaCierre != null ? r.FechaCierre.Value.ToString("yyyy-MM-dd") : null)));// Indicarle la Fecha de Cierre del Expediente
                        lista.Add(new Parametros(@"desc", r.Descripcion));// Indicar la Descripción del Expediente
                        lista.Add(new Parametros(@"numhojas", r.NumHojas.ToString())); // Indicar el Número de Hojas del Expediente
                        lista.Add(new Parametros(@"cvesevi", r.CveSevi)); // Indicar la Clave SEVI
                        lista.Add(new Parametros(@"valordoc", r.ValorDoctal.Id.ToString())); // Señalar el identificador del Valor Documental
                        lista.Add(new Parametros(@"clasi", r.Clasificacion.Id.ToString()));// Señalar la Identificación de la Clasificación del Expediente
                        lista.Add(new Parametros(@"otrainfo", r.OtraInfo));// Indicarle Otra Información sobre el Expediente
                        lista.Add(new Parametros(@"esta", (r.Estatus == true ? "1" : "0")));// Indicar si está activo o no el Expediente (cierre o no)

                        string proce = "sp_registros_crud";// Indicarle el Procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                        { return true; }// Ejecución exitosa.
                        else
                        { return false; }// Ejecución NO exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false;// Indicar que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexión
                }
                else
                { return false; }// Intento NO Exitoso, Ver Error
            }
            else
            { return false; }// No es del tipo RegistroModel
        }
        /// <summary>
        /// Método para Ingresar un Registro
        /// </summary>
        /// <param name="o">Objeto del tipo RegistrosModel</param>
        /// <returns>Boleano</returns>
        public override bool IngresarRegisto(object o)
        {

            if (o.GetType() == typeof(RegistrosModel))// Verificar que el Objeto sea del Tipo RegistrosModel
            {
                if (Abrir())//Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    var r = (RegistrosModel)o; // Castear la Variable "r" al tipo RegistrosModel

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear una lista de Parámetros
                        lista.Add(new Parametros(@"opc", "2")); // Indicarle la Opción a ejecutar al Procedimiento
                        lista.Add(new Parametros(@"seriedoc", r.SerieDoctal)); // Indicarle el Idetificador del registro
                        lista.Add(new Parametros(@"tema", r.Tema.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", r.Fondo.Id.ToString())); // Indicarle la Identificación del Fondo
                        lista.Add(new Parametros(@"subfondo", r.SubFondo.Id.ToString()));// Indicarle la Identificación del Subfondo
                        lista.Add(new Parametros(@"fecini", r.FechaInicio.ToString("yyyyMMdd")));// Indicarle la Fecha de Inicio del Expediente
                        lista.Add(new Parametros(@"fecfin", r.FechaInicio.ToString("yyyyMMdd")));// Indicarle la Fecha de Cierre del Expediente
                        lista.Add(new Parametros(@"desc", r.Descripcion));// Indicar la Descripción del Expediente
                        lista.Add(new Parametros(@"numhojas", r.NumHojas.ToString())); // Indicar el Número de Hojas del Expediente
                        lista.Add(new Parametros(@"cvesevi", r.CveSevi)); // Indicar la Clave SEVI
                        lista.Add(new Parametros(@"valordoc", r.ValorDoctal.Id.ToString())); // Señalar el identificador del Valor Documental
                        lista.Add(new Parametros(@"clasi", r.Clasificacion.Id.ToString()));// Señalar la Identificación de la Clasificación del Expediente
                        lista.Add(new Parametros(@"otrainfo", r.OtraInfo));// Indicarle Otra Información sobre el Expediente
                        lista.Add(new Parametros(@"esta", (r.Estatus == true ? "1" : "0")));// Indicar si está activo o no el Expediente (cierre o no)

                        string proce = "sp_registros_crud";// Indicarle el Procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                        { return true; }// Ejecución exitosa.
                        else
                        { return false; }// Ejecución NO exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false;// Indicar que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexión
                }
                else
                { return false; }// Intento NO Exitoso, Ver Error
            }
            else
            {
                Error = "el objeto no es del tipo registrosmodel";
                return false;
            }// No es del tipo RegistroModel
        }
        /// <summary>
        /// Método para Consultar Todos los Registros en RegistrosModel
        /// </summary>
        /// <returns>Boleano</returns>
		public override bool ConsultarRegistros()
        {

            if (Abrir())//Intentar Abrir la Conexión
            {
                // Intento Exitoso
                try
                {
                    List<Parametros> lista = new List<Parametros>();
                    lista.Add(new Parametros(@"opc", "1")); // Indicarle la Opción a ejecutar al Procedimiento
                    lista.Add(new Parametros(@"seriedoc", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"tema", string.Empty));//Vacío
                    lista.Add(new Parametros(@"fondo", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"subfondo", string.Empty));// Vacío
                    lista.Add(new Parametros(@"fecini", string.Empty));// Vacío
                    lista.Add(new Parametros(@"fecfin", null));// Vacio
                    lista.Add(new Parametros(@"desc", string.Empty));// Vacío
                    lista.Add(new Parametros(@"numhojas", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"cvesevi", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"valordoc", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"clasi", string.Empty));// Vacío
                    lista.Add(new Parametros(@"otrainfo", string.Empty));// Vacío
                    lista.Add(new Parametros(@"esta", string.Empty));// Vacio

                    string proce = "sp_registros_crud";

                    if (ConsultarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                    { return true; }// Consulta exitosa, Ver Tabla
                    else
                    { return false; }// Consulta NO exitosa, ver Error
                }
                catch (Exception e)// Atrapar el Error
                {
                    Error = e.Message.ToString(); // Guardar el Error
                    return false;// Indicar que existe un error
                }
                finally { Cerrar(); }// Cerrar la Conexión
            }
            else
            { return false; }// Intento NO Exitoso, Ver Error
        }
        /// <summary>
        /// Función para la Consulta del Consecutivo de la Serie Documental
        /// </summary>
        /// <param name="o"></param>
        /// <returns></returns>
        public bool ConsecutivoRegistroSeries(object o)
        {
            if (o.GetType() == typeof(RegistrosModel))//Verificar que el Objeto sea del Tipo RegistrosModel
            {
                //SI Son del mismo tipo
                var r = (RegistrosModel)o;//Castear la variable "r" al tipo RegistroModel
                string[] codigos = r.SerieDoctal.Split('.');//Separar los códigos que conjuntan la serie documental
                int c = 0;//Contador
                string[] code = new string[codigos.Length];//Arreglo para los códigos de la serie documental
                foreach (string codigo in codigos)//Barrer la serie documental
                {
                    code[c] = codigo;//guardar código en arreglo
                    c += 1;// Aumentar el contador
                }

                string proce = "sp_registros_seleccion";//Nombre del Procedimiento
                List<Parametros> lista = new List<Parametros>();//Lista de Parámetros
                lista.Add(new Parametros(@"opc", "1"));
                //lista.Add(new Parametros(@"seriedoc", string.Empty));//Vacío
                lista.Add(new Parametros(@"fondo", code[0]));
                lista.Add(new Parametros(@"subfondo", code[1]));
                lista.Add(new Parametros(@"area", code[2]));
                lista.Add(new Parametros(@"subarea", code[3]));
                lista.Add(new Parametros(@"servicio", code[4]));
                lista.Add(new Parametros(@"seccion", code[5]));
                lista.Add(new Parametros(@"serie", code[6]));
                lista.Add(new Parametros(@"consecutivo", string.Empty));
                lista.Add(new Parametros(@"año", r.FechaInicio.Year.ToString()));
                lista.Add(new Parametros(@"usr", string.Empty));//Usuario vacío, no se necesita en esta consulta

                if (Abrir())//Intentar abrir la conexión
                {
                    try
                    {
                        //Intentar consultar el procedimiento
                        if (ConsultarProcedimiento(proce, lista))
                        { return true; }//Intento Exitoso
                        else//Intento NO Exitoso, Consultar Error
                        { return false; }
                    }
                    catch (Exception e)//Atrapar el Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe el Error
                    }
                    finally { Cerrar(); }//Cerrar la conexión
                }
                else//Intento NO Exitoso, consultar Error
                {
                    return false;
                }
            }
            else//NO Son del mismo tipo
            {
                Error = "el objeto no es del tipo registromodel.";
                return false;
            }
        }
        /// <summary>
        /// Función para Eliminar el Registro de la Serie Documental si falla el ingreso a la Bitácora
        /// </summary>
        /// <param name="o">Objeto del tipo Registro</param>
        /// <returns></returns>
        public bool EliminarRegistroFallido(object o)
        {
            if (o.GetType() == typeof(RegistrosModel))//Verificar que objeto sea del tipo RegistrosModel
            {
                var r = (RegistrosModel)o; //Catear la variable al Tipo del Objeto

                string proce = "sp_registros_seleccion"; //Nombre del Procedimiento

                List<Parametros> lista = new List<Parametros>(); //Lista de parámetros del Procedimiento
                lista.Add(new Parametros(@"opc", "2"));//Opción a ejecutar en el Procedimiento
                //lista.Add(new Parametros(@"seriedoc", r.SerieDoctal));//campo vacío
                lista.Add(new Parametros(@"fondo", string.Empty));//Campo Vacío
                lista.Add(new Parametros(@"subfondo", string.Empty));//Campo Vacío
                lista.Add(new Parametros(@"area", string.Empty));//Campo Vacío
                lista.Add(new Parametros(@"subarea", string.Empty));
                lista.Add(new Parametros(@"servicio", string.Empty));
                lista.Add(new Parametros(@"seccion", string.Empty));//Campo Vacío
                lista.Add(new Parametros(@"serie", string.Empty));//Campo Vacío
                lista.Add(new Parametros(@"conecutivo", string.Empty));//Campo Vacío
                lista.Add(new Parametros(@"año", string.Empty));//Campo Vacío
                lista.Add(new Parametros(@"usr", string.Empty));//Campo Vacío

                if (Abrir())//Intentar abrir la conexión
                {
                    //Intento Exitoso
                    try
                    {
                        //Intentar
                        if (EjecutarProcedimiento(proce, lista))//Ejecutar el Procedimiento
                        {
                            //Intento Exitoso
                            return true;
                        }
                        else
                        {
                            //Intento NO Existoso, Consultar Error
                            return false;
                        }
                    }
                    catch (Exception e)//Atrapar el Error
                    {
                        Error = e.Message.ToString();
                        return false;
                    }
                    finally//Por Último
                    { Cerrar(); }//Cerrar Conexión
                }
                else//Intento NO Exitoso, Consultar Error
                {
                    return false;
                }
            }
            else//No son del mismo Tipo
            {
                Error = "el objeto no es del tipo registrosmodel.cs".ToUpper();
                return false;
            }

        }
        /// <summary>
        /// Función para seleccionar las Series Según Usuario
        /// </summary>
        /// <param name="o">Objeto del tipo Registro</param>
        /// <returns></returns>
        public bool SeleccionarSeriesXUsuario(object o)
        {
            if (o.GetType() == typeof(RegistrosModel))//Validar que el Objeto sea del Tipo RegistrosModel
            {
                var r = (RegistrosModel)o;
                string proce = "sp_registros_seleccion";

                List<Parametros> lista = new List<Parametros>();
                lista.Add(new Parametros(@"opc", "2"));
                lista.Add(new Parametros(@"fondo", string.Empty));
                lista.Add(new Parametros(@"subfondo", string.Empty));
                lista.Add(new Parametros(@"area", string.Empty));
                lista.Add(new Parametros(@"subarea", string.Empty));
                lista.Add(new Parametros(@"servicio", string.Empty));
                lista.Add(new Parametros(@"seccion", string.Empty));
                lista.Add(new Parametros(@"serie", string.Empty));
                lista.Add(new Parametros(@"consecutivo", string.Empty));
                lista.Add(new Parametros(@"año", string.Empty));
                lista.Add(new Parametros(@"usr", r.Usuario.Id.ToString()));

                if(Abrir())//Intentar abrir la conexión
                {
                    //Conexión Exitosa
                    try
                    {
                        //Intentar la Consulta
                        if(ConsultarProcedimiento(proce, lista))
                        {
                            return true;//Intento Exitoso
                        }
                        else
                        {
                            return false;//Intento NO Exitoso
                        }
                    }
                    catch(Exception e)//Atrapar el Error
                    {
                        Error = e.Message.ToString();//Guardar el Error
                        return false;//Indicar que existe el error
                    }
                    finally { Cerrar(); }//Cerrar la Conexión
                }
                else//Intento fallido
                {
                    return false;
                }
            }
            else//No son del mismi tipo
            {
                Error = "el objeto no es edl tipo registromodel.cs".ToUpper();
                return false;
            }
        }

    }//end RegistrosController

}//end namespace Controladores