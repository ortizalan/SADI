///////////////////////////////////////////////////////////
//  RegistrosController.cs
//  Implementation of the Class RegistrosController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:49
//  Original author: Ing. Alan Ortiz Pèrez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SADI.Clases.Modelos;



using SADI.Clases;
namespace SADI.Clases.Controladores {
	/// <summary>
	/// Controlador del Modelo Registros
	/// </summary>
	public class RegistrosController : Metodos {
        /// <summary>
        /// Constructor de la Clase
        /// </summary>
		public RegistrosController(){

		}
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
		~RegistrosController(){

		}

		/// <summary>
        /// Método para consultar 
        /// </summary>
        /// <param name="o">Objeto del Tipo RegistrosModel</param>
        /// <returns></returns>
		public override bool ConsultarRegistro(object o){

			if(o.GetType() == typeof(RegistrosModel))// Verificar que el Objeto sea del Tipo RegistrosModel
            {
                if(Abrir())//Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    var r = (RegistrosModel)o; // Castear la Variable "r" al tipo RegistrosModel

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4")); // Indicarle la Opción a ejecutar al Procedimiento
                        lista.Add(new Parametros(@"seriedoc", r.SerieDoctal)); // Indicarle el Idetificador del registro
                        lista.Add(new Parametros(@"tema", string.Empty));//Vacío
                        lista.Add(new Parametros(@"fondo", string.Empty)); // Vacío
                        lista.Add(new Parametros(@"subfondo", string.Empty));// Vacío
                        lista.Add(new Parametros(@"fecini", string.Empty));// Vacío
                        lista.Add(new Parametros(@"fecfin", string.Empty));// Vacio
                        lista.Add(new Parametros(@"nomexp", string.Empty));// Vacío
                        lista.Add(new Parametros(@"desc", string.Empty));// Vacío
                        lista.Add(new Parametros(@"numhojas", string.Empty)); // Vacío
                        lista.Add(new Parametros(@"cvesevi", string.Empty)); // Vacío
                        lista.Add(new Parametros(@"valordoc", string.Empty)); // Vacío
                        lista.Add(new Parametros(@"clasi", string.Empty));// Vacío
                        lista.Add(new Parametros(@"otrainfo", string.Empty));// Vacío
                        lista.Add(new Parametros(@"esta", string.Empty));// Vacio

                        string proce = "sp_registros_crud";

                        if(ConsultarProcedimiento(proce,lista))// Intentar Consultar el Procedimiento
                        { return true; }// Consulta exitosa, Ver Tabla
                        else
                        { return false; }// Consulta NO exitosa, ver Error
                    }
                    catch(Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false;// Indicar que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexión
                }
                else
                { return false; }// Intento NO Exitoso, Ver Error
            }
            else
            { return false; }// No es del tipo RegistroModel
		}
		/// <summary>
        /// Método para Actualizar Registro
        /// </summary>
        /// <param name="o">Objeto del Tipo RegistrosModel</param>
        /// <returns>Boleano</returns>
		public override bool ActualizarRegistro(object o){

            if (o.GetType() == typeof(RegistrosModel))// Verificar que el Objeto sea del Tipo RegistrosModel
            {
                if (Abrir())//Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    var r = (RegistrosModel)o; // Castear la Variable "r" al tipo RegistrosModel

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear una lista de Parámetros
                        lista.Add(new Parametros(@"opc", "3")); // Indicarle la Opción a ejecutar al Procedimiento
                        lista.Add(new Parametros(@"seriedoc", r.SerieDoctal)); // Indicarle el Idetificador del registro
                        lista.Add(new Parametros(@"tema", r.Tema.Id.ToString()));//Identificador del tema de la Serie Documental
                        lista.Add(new Parametros(@"fondo", r.Fondo.Id.ToString())); // Indicarle la Identificación del Fondo
                        lista.Add(new Parametros(@"subfondo", r.SubFondo.Id.ToString()));// Indicarle la Identificación del Subfondo
                        lista.Add(new Parametros(@"fecini", r.FechaInicio.ToString("yyyy-MM-dd")));// Indicarle la Fecha de Inicio del Expediente
                        lista.Add(new Parametros(@"fecfin", (r.FechaCierre != null ? r.FechaCierre.Value.ToString("yyyy-MM-dd"):null)));// Indicarle la Fecha de Cierre del Expediente
                        lista.Add(new Parametros(@"nomexp", r.NombreExp));// Indcar el Nombre del Expediente
                        lista.Add(new Parametros(@"desc", r.Descripcion));// Indicar la Descripción del Expediente
                        lista.Add(new Parametros(@"numhojas", r.NumHojas.ToString())); // Indicar el Número de Hojas del Expediente
                        lista.Add(new Parametros(@"cvesevi", r.CveSevi)); // Indicar la Clave SEVI
                        lista.Add(new Parametros(@"valordoc", r.ValorDoctal.Id.ToString())); // Señalar el identificador del Valor Documental
                        lista.Add(new Parametros(@"clasi", r.Clasificacion.Id.ToString()));// Señalar la Identificación de la Clasificación del Expediente
                        lista.Add(new Parametros(@"otrainfo", r.OtraInfo));// Indicarle Otra Información sobre el Expediente
                        lista.Add(new Parametros(@"esta", (r.Estatus== true?"1":"0")));// Indicar si está activo o no el Expediente (cierre o no)

                        string proce = "sp_registros_crud";// Indicarle el Procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                        { return true; }// Ejecución exitosa.
                        else
                        { return false; }// Ejecución NO exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false;// Indicar que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexión
                }
                else
                { return false; }// Intento NO Exitoso, Ver Error
            }
            else
            { return false; }// No es del tipo RegistroModel
        }
		/// <summary>
        /// Método para Ingresar un Registro
        /// </summary>
        /// <param name="o">Objeto del tipo RegistrosModel</param>
        /// <returns>Boleano</returns>
		public override bool IngresarRegisto(object o){

            if (o.GetType() == typeof(RegistrosModel))// Verificar que el Objeto sea del Tipo RegistrosModel
            {
                if (Abrir())//Intentar Abrir la Conexión
                {
                    // Intento Exitoso
                    var r = (RegistrosModel)o; // Castear la Variable "r" al tipo RegistrosModel

                    try
                    {
                        List<Parametros> lista = new List<Parametros>();// Crear una lista de Parámetros
                        lista.Add(new Parametros(@"opc", "2")); // Indicarle la Opción a ejecutar al Procedimiento
                        lista.Add(new Parametros(@"seriedoc", r.SerieDoctal)); // Indicarle el Idetificador del registro
                        lista.Add(new Parametros(@"fondo", r.Fondo.Id.ToString())); // Indicarle la Identificación del Fondo
                        lista.Add(new Parametros(@"subfondo", r.SubFondo.Id.ToString()));// Indicarle la Identificación del Subfondo
                        lista.Add(new Parametros(@"fecini", r.FechaInicio.ToString("yyyy-MM-dd")));// Indicarle la Fecha de Inicio del Expediente
                        lista.Add(new Parametros(@"fecfin", (r.FechaCierre!= null ? r.FechaCierre.Value.ToString("yyyy-MM-dd"):null)));// Indicarle la Fecha de Cierre del Expediente
                        lista.Add(new Parametros(@"nomexp", r.NombreExp));// Indcar el Nombre del Expediente
                        lista.Add(new Parametros(@"desc", r.Descripcion));// Indicar la Descripción del Expediente
                        lista.Add(new Parametros(@"numhojas", r.NumHojas.ToString())); // Indicar el Número de Hojas del Expediente
                        lista.Add(new Parametros(@"cvesevi", r.CveSevi)); // Indicar la Clave SEVI
                        lista.Add(new Parametros(@"valordoc", r.ValorDoctal.Id.ToString())); // Señalar el identificador del Valor Documental
                        lista.Add(new Parametros(@"clasi", r.Clasificacion.Id.ToString()));// Señalar la Identificación de la Clasificación del Expediente
                        lista.Add(new Parametros(@"otrainfo", r.OtraInfo));// Indicarle Otra Información sobre el Expediente
                        lista.Add(new Parametros(@"esta", (r.Estatus == true ? "1" : "0")));// Indicar si está activo o no el Expediente (cierre o no)

                        string proce = "sp_registros_crud";// Indicarle el Procedimiento

                        if (EjecutarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                        { return true; }// Ejecución exitosa.
                        else
                        { return false; }// Ejecución NO exitosa, ver Error
                    }
                    catch (Exception e)// Atrapar el Error
                    {
                        Error = e.Message.ToString(); // Guardar el Error
                        return false;// Indicar que existe un error
                    }
                    finally { Cerrar(); }// Cerrar la Conexión
                }
                else
                { return false; }// Intento NO Exitoso, Ver Error
            }
            else
            { return false; }// No es del tipo RegistroModel
        }
        /// <summary>
        /// Método para Consultar Todos los Registros en RegistrosModel
        /// </summary>
        /// <returns>Boleano</returns>
		public override bool ConsultarRegistros(){

            if (Abrir())//Intentar Abrir la Conexión
            {
                // Intento Exitoso
                try
                {
                    List<Parametros> lista = new List<Parametros>();
                    lista.Add(new Parametros(@"opc", "1")); // Indicarle la Opción a ejecutar al Procedimiento
                    lista.Add(new Parametros(@"seriedoc", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"tema", string.Empty));//Vacío
                    lista.Add(new Parametros(@"fondo", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"subfondo", string.Empty));// Vacío
                    lista.Add(new Parametros(@"fecini", string.Empty));// Vacío
                    lista.Add(new Parametros(@"fecfin", null));// Vacio
                    lista.Add(new Parametros(@"nomexp", string.Empty));// Vacío
                    lista.Add(new Parametros(@"desc", string.Empty));// Vacío
                    lista.Add(new Parametros(@"numhojas", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"cvesevi", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"valordoc", string.Empty)); // Vacío
                    lista.Add(new Parametros(@"clasi", string.Empty));// Vacío
                    lista.Add(new Parametros(@"otrainfo", string.Empty));// Vacío
                    lista.Add(new Parametros(@"esta", string.Empty));// Vacio

                    string proce = "sp_registros_crud";

                    if (ConsultarProcedimiento(proce, lista))// Intentar Consultar el Procedimiento
                    { return true; }// Consulta exitosa, Ver Tabla
                    else
                    { return false; }// Consulta NO exitosa, ver Error
                }
                catch (Exception e)// Atrapar el Error
                {
                    Error = e.Message.ToString(); // Guardar el Error
                    return false;// Indicar que existe un error
                }
                finally { Cerrar(); }// Cerrar la Conexión
            }
            else
            { return false; }// Intento NO Exitoso, Ver Error
        }

	}//end RegistrosController

}//end namespace Controladores