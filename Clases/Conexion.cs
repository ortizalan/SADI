///////////////////////////////////////////////////////////
//  Conexion.cs
//  Implementation of the Class Conexion
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:31
//  Original author: Elizabeth
///////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Text;
using System.IO;
using DatosBD; // Librería que Contiene los Datos de la Conexión al Servidor



namespace SADI.Clases
{
    public class Conexion
    {

        private SqlDataAdapter _adapter;
        private SqlCommand _command;
        private SqlConnection _connection;
        private string _error;
        private DataTable _tabla;

        /// <summary>
        /// Contructor Interno para Inicializar la Conexión a la Base de Datos
        /// </summary>
        protected Conexion()
        {
            // Parámetros de la Conexión protegidos en la Librería DatosBD
            _connection = new SqlConnection("Server =" + DatosUsuarios.Servidor + "; Initial Catalog =" + DatosUsuarios.BaseDeDatos + ";Persist Security Info=False;Integrated Security=true;");
        }
        /// <summary>
        /// Destructor de la Clase
        /// </summary>
        ~Conexion()
        {

        }

        /// <summary>
        /// Método Público para Establecer la Conexión a la Base de Datos
        /// </summary>
        /// <returns>valor Boleano</returns>
        public bool Abrir()
        {
            if (Connection.State == ConnectionState.Closed)// Verificar que la conexión esté cerrada
            {
                try
                {
                    Connection.Open();// Abrir la Conexión
                    return true;// Indicar que la operación fue exitosa
                }
                catch (SqlException e)// Cachar el error
                {
                    Error = e.Message.ToString();// Mostrar el error
                    return false;// Operación no Exitosa
                }
            }
            else
            { return false; }// No está cerrada la conexión 
        }

        /// <summary>
        /// Acceder de manera interna al Adaptador
        /// </summary>
        private SqlDataAdapter Adapter
        {
            get { return _adapter; }
            set { _adapter = value; }
        }

        /// <summary>
        /// Método Público para Cerrar la Coenxión de la Base de Datos
        /// </summary>
        public bool Cerrar()
        {
            if (Connection.State == ConnectionState.Open)
            {
                try
                {
                    Connection.Close();
                    return true;
                }
                catch (SqlException e)
                {
                    Error = e.Message.ToString();
                    return false;
                }
            }
            else
            { return false; }
        }

        /// <summary>
        /// Acceder de manera interna al comando
        /// </summary>
        private SqlCommand Command
        {
            get { return _command; }
            set { _command = value; }
        }

        /// <summary>
        /// Acceder de manera interna a la Conexion
        /// </summary>
        private SqlConnection Connection
        {
            get { return _connection; }
        }

        /// <summary>
        /// Método para Realizar Consultas a través de Procedimientos Almacenados
        /// </summary>
        /// <param name="procedimiento">Nombre del Procedimiento</param>
        /// <param name="lista">Arreglo con Parámetros SQL</param>
        protected bool ConsultarProcedimiento(string procedimiento, List<Parametros> lista)
        {
            Command = new SqlCommand();
            Command.CommandType = CommandType.StoredProcedure;
            Command.CommandText = procedimiento;
            Command.Connection = Connection;
            foreach (Parametros p in lista)
            {
                Command.Parameters.AddWithValue(p.NombreParametro, p.ValorParametro);
            }
            Tabla = new DataTable();
            Adapter = new SqlDataAdapter();
            Adapter.SelectCommand = Command;
            Command.ExecuteNonQuery();
            Adapter.Fill(Tabla);
            return true;
        }

        /// <summary>
        /// Mira Rafita... este es el Método para Ejecutar Procedimientos Almacenados
        /// </summary>
        /// <param name="procedimiento">Nombre del Procedimiento</param>
        /// <param name="lista">Arreglo de Parámetros de SQL</param>
        protected bool EjecutarProcedimiento(string procedimiento, List<Parametros> lista)
        {
            try
            {
                Command = new SqlCommand();// Inicializar el Commando
                Command.CommandType = CommandType.StoredProcedure;// Indicarle el tipo de comando
                Command.CommandText = procedimiento;// Indicarle el nombre del procedimiento de la BD
                Command.Connection = Connection;// Asignarle la Conexión
                foreach (Parametros p in lista)// Agregar los parámetros si los tiene
                {
                    Command.Parameters.AddWithValue(p.NombreParametro, p.ValorParametro);
                }
                Command.ExecuteNonQuery();// Ejecutar el comando
                return true;// Se realizó la operación con éxito
            }
            catch(Exception e)// Cachar el error
            {
                Error = e.Message.ToString();// Mostrar el error en la varibale
                return false;// Indicar que no fue exitosa la operación
            }

        }
        /// <summary>
        /// Realizar COnsultas Directas a la Base de Datos
        /// </summary>
        /// <param name="sentencia">Sentencia SQL</param>
        /// <param name="lista">Lista de Parámetros</param>
        /// <returns>Boleano</returns>
        protected bool ConsultarSentenciaSQL(string sentencia, List<Parametros> lista)
        {
            Command = new SqlCommand();
            Command.CommandType = CommandType.Text;
            Command.CommandText = sentencia;
            Command.Connection = Connection;
            foreach (Parametros p in lista)
            {
                Command.Parameters.AddWithValue(p.NombreParametro, p.ValorParametro);
            }
            Tabla = new DataTable();
            Adapter = new SqlDataAdapter();
            Adapter.SelectCommand = Command;
            Command.ExecuteScalar();// Lo utilizamos para ejecutar sentencias directas
            Adapter.Fill(Tabla);
            return true;
        }

        /// <summary>
        /// Acceder al Error que resulte en los intentos de conexion
        /// </summary>
        public string Error
        {
            get { return _error; }
            set { _error = value; }
        }

        /// <summary>
        /// Acceder a los datos alojados en la tabla
        /// </summary>
        public DataTable Tabla
        {
            get { return _tabla; }
            set { _tabla = value; }
        }

    }//end Conexion

}//end namespace SADI.Clases
