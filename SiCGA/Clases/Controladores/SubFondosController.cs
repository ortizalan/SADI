///////////////////////////////////////////////////////////
//  SubFondosController.cs
//  Implementation of the Class SubFondosController
//  Generated by Enterprise Architect
//  Created on:      10-mar.-2017 13:18:59
//  Original author: Ing. Alan Adalberto Ortiz Pérez
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using SiCGA.Clases.Modelos;



using SiCGA.Clases;
namespace SiCGA.Clases.Controladores
{
    /// <summary>
    /// Controlador para el Modelo SubFondos
    /// </summary>
    public class SubFondosController : Metodos
    {

        public SubFondosController()
        {

        }

        ~SubFondosController()
        {

        }

        /// <summary>
        /// Método Para Consultar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo class</param>
        public override bool ConsultarRegistro(Object o)
        {
            if (o.GetType() == typeof(SubFondosModel))// Verificar si el Objeto es del tipo SubFondoModel
            {
                var sf = (SubFondosModel)o; // Castear la variable sf al tipo SubFondosModel

                if (Abrir())//Intentar Establecer Conexión con BD
                {

                    // Intento Exitoso
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "4"));// Mandar la opción a ejecutar al Procedimiento
                        lista.Add(new Parametros(@"id", sf.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", sf.Fondo.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", sf.SubFondo));

                        string proce = "sp_subfondos_crud";

                        if (ConsultarProcedimiento(proce, lista))// Efectuar la consulta
                        { return true; }// Exitosa, consultar Tabla
                        else
                        { return false; }// NO Exitosa, Consultar Error
                    }
                    catch (Exception e)
                    {
                        Error = e.Message.ToString();
                        return false;
                    }
                    finally { Cerrar(); }
                }
                else
                { return false; }

            }
            else
            { return false; }// No es del tipo SubFondosModel
        }

        /// <summary>
        /// Método Para Actualizar los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo class</param>
        public override bool ActualizarRegistro(Object o)
        {
            if (o.GetType() == typeof(SubFondosModel))
            {
                var sf = (SubFondosModel)o;
                if (Abrir())
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "3"));
                        lista.Add(new Parametros(@"id", sf.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", sf.Fondo.Id.ToString()));
                        lista.Add(new Parametros(@"subfondo", sf.SubFondo));

                        string proce = "sp_subfondo_crud";

                        if (EjecutarProcedimiento(proce, lista))
                        { return true; }// Ejecución Exitosa, Consultar Tabla
                        else
                        { return false; }// Ejecución NO exitosa, Consultar Error
                    }
                    catch (Exception e)
                    {
                        Error = e.Message.ToString();
                        return false;
                    }
                    finally { Cerrar(); }
                }
                else
                { return false; }
            }
            else
            { return false; }
        }

        /// <summary>
        /// Método para Ingresar un Registro
        /// </summary>
        /// <returns>Boleano</returns>
        /// <param name="o">Objeto del Tipo Class</param>
        public override bool IngresarRegisto(Object o)
        {
            if (o.GetType() == typeof(SubFondosModel))
            {
                var sf = (SubFondosModel)o;

                if (Abrir())
                {
                    try
                    {
                        List<Parametros> lista = new List<Parametros>();
                        lista.Add(new Parametros(@"opc", "2"));
                        lista.Add(new Parametros(@"id", sf.Id.ToString()));
                        lista.Add(new Parametros(@"fondo", sf.Fondo.Id.ToString()));
                        lista.Add(new Parametros(@"subfondo", sf.SubFondo));

                        string proce = "sp_subfondos_crud";

                        if(EjecutarProcedimiento(proce,lista))
                        { return true; } // Exitosa, Consultar Table
                        else
                        { return false; }// NO Exitosa, Consultar Error
                    }
                    catch(Exception e)
                    {
                        Error = e.Message.ToString();
                        return false;
                    }
                    finally { Cerrar(); }
                }
                else
                { return false; }

            }
            else
            { return false; }
        }

        /// <summary>
        /// Método para Consultar Todos los Registros
        /// </summary>
        /// <returns>Boleano</returns>
        public override bool ConsultarRegistros()
        {

            return false;
        }

    }//end SubFondosController

}//end namespace Controladores